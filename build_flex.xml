<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="tomcat.update" name="OpenCms">

    <!-- The version-number ${version.number} is automatically set to the current date and time. For official builds this should be set to a proper value at the commandline. Set it like this: ant all -Dversion.number=4.3.28  -->    
    <!-- property environment="env"/ -->    

    <!-- Used to select between different application servers for packaging. Possible values are: "tomcat" or "bea" -->
    <property name="target.server" value="tomcat"/>
    
    <!-- Adjust this to your BEA home directory (used only for BEA targets) -->
    <property name="bea.home" value="C:/bea/wlserver6.1/config/mydomain/applications/"/>
    
    <property name="version.name" value="Flex"/>
    <property name="version.number" value="OpenCmsDev_Merge01"/>
    <property name="app.name" value="opencms"/>
    <property name="zip.home" value="../zip"/>
    <property name="pdf.home" value="../pdf"/>
    <property name="build.home" value="../build"/>

    <property name="module.home" value="../alkacon/opencms/" />
    
    <!-- Quick fix to compile to another server -->
    <property name="tomcat.home" value="Y:\"/>
    
    <property name="build.classes" value="${build.home}/classes"/>
    <property name="build.inputlib" value="../ExternalComponents"/>
    <property name="build.web" value="${build.home}/${app.name}"/>
    <property name="build.webinf" value="${build.web}/WEB-INF"/>
    <property name="build.lib" value="${build.webinf}/lib"/>
    <property name="build.excludes" value=""/> 
    
    <property name="build.inputlib.servlet" value="${build.inputlib}/servlet.jar"/>
    <property name="build.inputlib.activation" value="${build.inputlib}/activation.jar"/>
    <property name="build.inputlib.mail" value="${build.inputlib}/mail.jar"/>
    <property name="build.inputlib.xerces" value="${build.inputlib}/xerces-1_4_4.jar"/>
    <property name="build.inputlib.mysql" value="${build.inputlib}/mm_mysql-2_0_4-bin.jar"/>
    <property name="build.inputlib.fesi" value="${build.inputlib}/fesi.jar"/>            
    <property name="build.inputlib.oracle" value="${build.inputlib}/classes12.zip"/>
    <property name="build.inputlib.fop" value="${build.inputlib}/fop_bin.jar"/>     
    <property name="build.inputlib.oro" value="${build.inputlib}/jakarta-oro-2_0_6.jar"/>
    <property name="build.inputlib.tidy" value="${build.inputlib}/Tidy.jar"/>
    <property name="build.inputlib.jimi" value="${build.inputlib}/jimi_10.jar"/>
           
    <property name="build.version.propertyfile" value="${build.classes}/com/opencms/core/version.properties"/>
    <property name="build.version.jsfile" value="${build.webinf}/ocsetup/vfs/system/workplace/templates/js/version.js"/>
    <property name="build.version.setupfile" value="${build.web}/ocsetup/versions.txt"/>

    <property name="jar.opencms" value="${build.lib}/opencms.jar"/>
    <property name="jar.modules" value="${build.lib}/opencms-modules.jar"/>
    
    <target depends="jar,tomcat.copy" description="Recompile changed classes and install in Tomcat webapps directory" name="tomcat.update"/>      

    <target depends="cleanclasses,tomcat.update" description="Do a complete recompile of all classes and install in Tomcat webapps directory" name="tomcat.all"/>          

    <target depends="jar,bea.copy" description="Recompile changed classes and install in BEA Weblogic directory" name="bea.update"/>      

    <target depends="cleanclasses,bea.update" description="Do a complete recompile of all classes and install in BEA Weblogic directory" name="bea.all"/>          
            
    <target description="Checks if all needed libaries are available" name="init">

        <condition property="libsAvailable">
            <and>
                <!-- available file="${build.inputlib.servlet}"/ -->
                <available file="${build.inputlib.activation}"/>
                <available file="${build.inputlib.mail}"/>
                <available file="${build.inputlib.xerces}"/>
                <available file="${build.inputlib.mysql}"/>
                <available file="${build.inputlib.fesi}"/>
                <available file="${build.inputlib.oro}"/>
                <available file="${build.inputlib.tidy}"/>
            </and>
        </condition>

        <property name="ex.oracle" value="com/opencms/file/oracleplsql/**"/>
        <property name="ex.pdflaunch" value="com/opencms/launcher/CmsPdfLauncher.java"/>
                
        <condition property="build.excludes" value="${build.excludes},${ex.oracle}">
            <not><available file="${build.inputlib.oracle}"/></not>
        </condition>        
        
        <condition property="build.excludes" value="${build.excludes},${ex.pdflaunch}">
            <not><available file="${build.inputlib.fop}"/></not>
        </condition> 
                                
        <!-- Quick fix to compile to another server
        <condition property="tomcat.home" value="${env.TOMCAT_HOME}">
            <available file="${env.TOMCAT_HOME}" type="dir"/>
        </condition>
        
        <condition property="tomcat.home" value="${env.CATALINA_HOME}">
            <available file="${env.CATALINA_HOME}" type="dir"/>
        </condition>
        -->
        
        <condition property="build.local" value="$../local_tomcat">
            <equals arg1="${target.server}" arg2="tomcat"/>
        </condition>
        <condition property="build.local" value="$../local_bea">
            <equals arg1="${target.server}" arg2="bea"/>
        </condition>
        <echo message="Using local directory: ${build.local}"/>
    </target>
    
    
    <target depends="init" description="Stop target if required libaries are missing" name="initmsg" unless="libsAvailable">
        <fail>
        
Error: Some of the required libaries are not available.

To compile OpenCms/Flex, you need the following libaries:
${build.inputlib.servlet}
${build.inputlib.activation}
${build.inputlib.mail}
${build.inputlib.xerces}
${build.inputlib.mysql}
${build.inputlib.fesi}
${build.inputlib.oro}
${build.inputlib.tidy}
        </fail>
    </target>


    <target depends="initmsg" description="Create output directories" name="prepare">
        <mkdir dir="${build.classes}"/>
        <mkdir dir="${build.home}"/>
        <mkdir dir="${build.lib}"/>
        <mkdir dir="${zip.home}"/>
        <mkdir dir="${pdf.home}"/>        
    </target>


    <target description="Delete existing ouput directories" name="clean">
        <delete dir="${build.home}"/>
    </target>

    
    <target description="Delete existing class directory" name="cleanclasses">
        <delete dir="${build.classes}"/>
    </target>


    <target depends="prepare" description="Complies all OpenCms classes" if="libsAvailable" name="compileclasses">
       <javac classpath="${build.inputlib.jimi}:${build.inputlib.servlet}:${build.inputlib.activation}:${build.inputlib.mail}:${build.inputlib.xerces}:${build.inputlib.oracle}:${build.inputlib.mysql}:${build.inputlib.oro}:${build.inputlib.tidy}:${build.inputlib.fesi}" debug="on" deprecation="on" destdir="${build.classes}" excludes="${build.excludes}" optimize="on" srcdir="src"/>
       <javac classpath="${build.inputlib.jimi}:${build.inputlib.servlet}:${build.inputlib.activation}:${build.inputlib.mail}:${build.inputlib.xerces}:${build.inputlib.oracle}:${build.inputlib.mysql}:${build.inputlib.oro}:${build.inputlib.tidy}:${build.inputlib.fesi}" debug="on" deprecation="on" destdir="${build.classes}" excludes="${build.excludes}" optimize="on" srcdir="${module.home}"/>

       <copy todir="${build.classes}">
            <fileset dir="src" includes="**/*.properties,**/*.txt"/>
            <fileset dir="${module.home}" includes="**/*.properties,**/*.txt"/>
       </copy>
       <!-- generate version infos-->
        <tstamp>
            <format pattern="yyyy-MM-dd-HH-mm" property="timestamp"/>
        </tstamp>
        <property name="version.number" value="${env.USERNAME}_${timestamp}"/>
        <echo file="${build.version.propertyfile}">version.number=${version.number}
</echo>
        <echo append="on" file="${build.version.propertyfile}">version.name=${version.name}</echo>
    </target>
    
    
    <target depends="compileclasses" description="Generate OpenCms JARs" name="jar">
        <jar basedir="${build.classes}" includes="com/opencms/**,source/**" jarfile="${jar.opencms}">
            <metainf dir="etc" includes="opencms.tld"/>
        </jar>
        <jar basedir="${build.classes}" includes="de/**" jarfile="${jar.modules}" />
    </target>

    
    <target depends="jar" description="Creates WAR file structure and copies needed files to it" name="copy">
       <copy todir="${build.home}">
            <fileset dir="." excludes="build.xml,build_flex.xml,**/.nbattrs,**/occlasses,**/occlasses/*" includes="*.*"/>
       </copy>

        <copy todir="${build.lib}">
            <fileset dir="${build.inputlib}">
                <include name="**/*.jar"/>
                <include name="**/*.zip"/>
                <exclude name="servlet.jar"/>
                <exclude name="classes12.zip"/>
            </fileset>
        </copy>              
       
       <copy todir="${build.webinf}">
            <fileset dir="etc" excludes="*/CVS/*,MANIFEST.MF,**/.nbattrs,**/occlasses,**/occlasses/*"/>
       </copy>

       <copy todir="${build.web}">
            <fileset dir="web" excludes="*/CVS/*,**/occlasses,**/occlasses/*,**/.nbattrs"/>
       </copy>
       
       <touch>
            <fileset dir="${build.local}"/>
       </touch>
       
       <copy todir="${build.web}">
            <fileset dir="${build.local}" excludes="*/CVS/*,**/.nbattrs"/>
       </copy>
              
       <!-- create version-info for the workplace-->
       <echo file="${build.version.jsfile}">var version = &apos;${version.number} ${version.name}&apos;;</echo>
       <!-- create version-info for the setup versions.txt -->
       <echo append="on" file="${build.version.setupfile}">OpenCms ${version.number}
</echo>
    </target>
    
    
    <target depends="copy" description="Builds the opencms.war" name="war">
        <zip zipfile="${build.home}/${app.name}.war">
        <!--             <zipfileset dir="${build.web}/WEB-INF" prefix="WEB-INF"/>             <zipfileset dir="${build.web}/ocsetup" prefix="ocsetup"/>             <zipfileset dir="${build.web}/export" prefix="export"/>         -->
            <zipfileset dir="${build.web}"/>
        </zip>
    </target>
    
    
    <target depends="war" description="Creates a distribution ZIP" name="zip">
        <zip basedir="${build.home}" excludes="**/classes/,**/opencms/" zipfile="${zip.home}/opencms_${version.number}_current.zip"/>
    </target>

    
    <target depends="clean,zip" description="Build from scratch and create distribution ZIP" name="all"/>

    
    <target depends="copy" description="Default compile target" name="compile"/>

    
    <target description="Copy updated files to Tomcat directorys" name="tomcat.copy">      
       <copy file="${jar.opencms}" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/lib"/>
       <copy file="${jar.modules}" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/lib"/>
       <copy file="etc/web.xml" todir="${tomcat.home}/webapps/${app.name}/WEB-INF"/>
       <copy file="etc/opencms.tld" todir="${tomcat.home}/webapps/${app.name}/WEB-INF"/>
    </target>     

        
    <target description="Copy updated files to BEA Weblogic directorys" name="bea.copy">      
       <copy file="${jar.opencms}" todir="${bea.home}/${app.name}/WEB-INF/lib"/>
       <copy file="${jar.modules}" todir="${bea.home}/${app.name}/WEB-INF/lib"/>
       <copy file="etc/web.xml" todir="${bea.home}/${app.name}/WEB-INF"/>
       <copy file="etc/opencms.tld" todir="${bea.home}/${app.name}/WEB-INF"/>
    </target>        
        
    
    <target depends="clean" description="Creates a source distribution ZIP including the required libaries" name="srcdist">
        <property name="build.srcdist" value="${build.home}/srcdist"/>
        <property name="build.srcdist.main" value="${build.srcdist}/opencms"/>
        <property name="build.srcdist.src" value="${build.srcdist.main}/src"/>
        <property name="build.srcdist.etc" value="${build.srcdist.main}/etc"/>
        <property name="build.srcdist.web" value="${build.srcdist.main}/web"/>
        <property name="build.srcdist.libs" value="${build.srcdist}/ExternalComponents"/>
        <property name="build.srcdist.local" value="${build.srcdist}/local"/>
        
        <mkdir dir="${build.srcdist}"/>     
        <mkdir dir="${build.srcdist.main}"/>     
        <mkdir dir="${build.srcdist.src}"/>     
        <mkdir dir="${build.srcdist.libs}"/>        
        <mkdir dir="${build.srcdist.etc}"/>     
        <mkdir dir="${build.srcdist.web}"/>        
        <mkdir dir="${build.srcdist.local}_bea"/>  
        <mkdir dir="${build.srcdist.local}_tomcat"/>  
        <mkdir dir="${zip.home}"/>        

        <copy todir="${build.srcdist.libs}">
            <fileset dir="${build.inputlib}">
                <include name="**/*.jar"/>
                <include name="**/*.zip"/>
            </fileset>
        </copy>
        
        <copy todir="${build.srcdist.src}">
            <fileset dir="src" excludes="de/**,*/CVS/*,**/.nbattrs"/>
        </copy>
        
        <copy todir="${build.srcdist.etc}">
            <fileset dir="etc" excludes="*/CVS/*,**/.nbattrs"/>
        </copy>

        <copy todir="${build.srcdist.web}">
            <fileset dir="web" excludes="*/CVS/*,**/.nbattrs"/>
        </copy>         

        <copy todir="${build.srcdist.main}">
            <fileset dir="." excludes="*/CVS/*,**/.nbattrs" includes="*.*"/>
        </copy>
        
        <touch>
            <fileset dir="$../local_bea"/>
            <fileset dir="$../local_tomcat"/>
        </touch>   
        <copy todir="${build.srcdist.local}_bea">
            <fileset dir="$../local_bea" excludes="*/CVS/*,**/.nbattrs"/>
        </copy>        
        <copy todir="${build.srcdist.local}_tomcat">
            <fileset dir="$../local_tomcat" excludes="*/CVS/*,**/.nbattrs"/>
        </copy>  
        
        <tstamp>
            <format pattern="yyyy-MM-dd-HH-mm" property="timestamp"/>
        </tstamp>
        
        <property name="version.number" value="${env.USERNAME}_${timestamp}"/>
        
        <zip basedir="${build.srcdist}" zipfile="${zip.home}/opencms_src_${version.number}.zip"/>
    </target>

</project>
