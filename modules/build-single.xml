<?xml version="1.0" encoding="UTF-8"?>

<project name="OpenCms Common Module" default="dist" basedir=".">    
 	<property name="opencms.input" 						location="${basedir}/.." />
    <property name="opencms.output"						location="${opencms.input}/.." />
	<property name="opencms.input.warfiles"            	location="${opencms.input}/webapp" />
    <property name="opencms.input.libs" 				location="${opencms.input.warfiles}/WEB-INF/lib" />
	<property name="opencms.build" 						location="${opencms.output}/build"/>
    <property name="opencms.core.lib"	 				location="${opencms.build}/jars-core" />	
	
    <property name="module.input" 						location="${basedir}/${module.name}" />
    <property name="module.input.res" 					location="${module.input}/resources" />
    <property name="module.input.src.single"            location="${module.input}/src" />
    <property name="module.input.src.shared"            location="${opencms.input}/src-modules" />
	<property file="${module.input}/module.properties" />
	<property name="module.output.classes"				location="${opencms.build}/classes-${module.name}" />
    <property name="module.output.jar"              	location="${opencms.build}/jars-${module.name}" />
	<property name="module.output.zip"					location="${opencms.output}/zip" /> 

    <property name="app.name"			 				location="opencms" />	
	
    <property name="jar.excludes"                  		value="**/CVS/*,**/.cvsignore,**/.nbattrs,**/.project,**/.classpath" />
    <property name="zip.excludes"                  		value="**/CVS/*,**/.cvsignore,**/.nbattrs,**/.project,**/.classpath" />
    <property name="jar.includes.single"           		value="**/*.properties,**/*.txt,**/*.dtd,**/*.xml" />
    <property name="jar.includes.shared"           		value="*.properties,*.txt,*.dtd,*.xml" />
	
    <property environment="env" />
	
	<property file="${basedir}/opencms.properties" />
	
	<taskdef resource="net/sf/antcontrib/antlib.xml">
	  <classpath>
	    <pathelement location="${opencms.input.libs}/ant-contrib-1.0b1.jar"/>
	  </classpath>
	</taskdef>
	
    <target name="clean" description="Deletes outputs">
        <delete dir="${module.output.classes}" />
        <delete dir="${module.output.jar}" />
    	<if> 
    		<available file="${module.output.zip}" />
    		<then>
		        <delete>
		            <fileset dir="${module.output.zip}">
		                <include name="${module.name}_*.zip"/>
		            </fileset>
		        </delete>
    		</then>
    	</if>
    </target>        
	
    <target name="init" 
    	description="Checks if all required libraries are available">
    	
    	<for list="${module.dependencies}" param="dependency">
    	  <sequential>
        	<property name="@{dependency}.input" value="${basedir}/@{dependency}" />
    		<property name="@{dependency}.output.classes" location="${opencms.build}/classes-@{dependency}" />
    	    <property name="@{dependency}.output.jar" location="${opencms.build}/jars-@{dependency}" />
            <property file="${@{dependency}.input}/module.properties" prefix="@{dependency}" />
    	    <property name="@{dependency}.output.zip" location="${module.output.zip}/@{dependency}_${@{dependency}.module.version}.zip" />

        	<condition property="@{dependency}.available">
        		<and>		
        			<available file="${@{dependency}.output.zip}" />
           		</and>
        	</condition>
    	  </sequential>
    	</for>
    	
    	<for list="${module.libs}" param="library">
    		<sequential>
		    	<condition property="@{library}.available">
		    		<and>		
        				<available file="${opencms.input.libs}/@{library}"/>
		       		</and>
		    	</condition>
      	    </sequential>
      	</for>

        <if>
            <available file="${module.input.src.single}" />
            <then>
                <property name="src.mode" value="single" />                    
                <property name="module.input.src" value="${module.input.src.single}" />
            </then>
            <else>
                <var name="module.input.src.test" value="${module.input.src.shared}" />
                <var name="module.package" value="" />
                <for list="${module.name}" param="package" delimiter="." >
                    <sequential>
                        <var name="module.input.src.test" value="${module.input.src.test}/@{package}" />
                        <var name="module.package" value="${module.package}@{package}/" />
                    </sequential>
                </for>
            	<if>
            		<available file="${module.input.src.test}" />
            		<then>
		            	<for param="file" >
			            	<fileset dir="${module.input.src.test}">
			            		<include name="*" />
			            	</fileset>
		                    <sequential>
		                        <var name="notempty" value="true" />
		                    </sequential>
						</for>
            		</then>
            	</if>
                <if>
                	<isset property="notempty" />
                    <then>
                        <property name="src.mode" value="shared" />  
                        <property name="module.input.src" value="${module.input.src.test}" />
                    </then>
                    <else>
                    	<if>
                    		<isset property="module.packages" />
                        	<then>
    	                        <property name="src.mode" value="multishared" />                    
                                <property name="module.input.src" value="${module.input.src.shared}" />
                        	</then>
                        	<else>
    	                        <property name="src.mode" value="none" />                    
                        	</else>
                    	</if>
                    </else>
                </if>
            </else>
        </if>
        
        <condition property="opencms.available">
        	<and>
	            <available file="${opencms.core.lib}/opencms.jar"/>
    		</and>
        </condition>
        
        <condition property="tomcat.home" value="${env.TOMCAT_HOME}">
            <available file="${env.TOMCAT_HOME}" type="dir"/>
        </condition>

        <condition property="tomcat.home" value="${env.CATALINA_HOME}">
            <available file="${env.CATALINA_HOME}" type="dir"/>
        </condition>

        <condition property="resources.available">
        	<and>
	            <available file="${module.input.res}" type="dir" />
    		</and>
        </condition>
    	
    	<if>
    		<not><isset property="resources.available"/></not>
    		<then>
    			<mkdir dir="${module.input.res}" />
    		</then>
    	</if>
    	
    	<echo message="Building OpenCms Common Module ${module.name} ${module.version} for OpenCms ${version.number} (${version.name})" />
        <echo message=" " />
        <echo message="OpenCms core lib directory is: ${opencms.core.lib}" />
        <echo message="OpenCms lib directory is: ${opencms.input.libs}" />
        <echo message="OpenCms output directory is: ${opencms.output}" />
        <echo message="Module input directory is: ${module.input}"/>
        <echo message="Module source directory is: ${module.input.src}"/>
        <echo message="Detected Java version: ${ant.java.version}"/>
        <echo message="Tomcat home is: ${tomcat.home}" />        
        <echo message="Excluded files in Jar: ${jar.excludes}" />
        <if>
            <equals arg1="${src.mode}" arg2="shared" />
            <then>
                <echo message="Included files in Jar: ${jar.includes.shared}" />
            </then>
            <else>
                <echo message="Included files in Jar: ${jar.includes.single}" />
            </else>
        </if>
        <echo message=" " />
        <echo message="Module dependencies: ${module.dependencies}" />
        <echo message="Module libraries: ${module.libs}" />
    </target>	     
	
    <target name="buildcore" 
    	unless="opencms.available" description="Generates the opencms.jar if it is missing">
    	
    	<echo message="Core opencms.jar missing, building it using ${opencms.input}/build.xml" />    	 
		<ant antfile="${opencms.input}/build.xml" target="jar"/>
		<antcall target="clean" />
    </target>
        
    <target name="builddeps" description="Generates all the modules dependencies">
    	<for list="${module.dependencies}" param="dependency">
    		<sequential>
	    		<if>
		    		 <not>
		    		 	<istrue value="${@{dependency}.available}"/>
		    		 </not>
		    		 <then>
		            	<echo message="Module dependency @{dependency} is missing, building it" />
		        		<ant antfile="${basedir}/build.xml" target="dependencies" inheritAll="false" >
		            		<property name="module.name" value="@{dependency}" />
		            	</ant>
		    		 </then>
	    		</if>
    		</sequential>
   		</for>
	</target>
	
	<target name="checklibs" 
    	depends="init, buildcore, builddeps" description="Stop target if libraries required for compilation are missing">
    	
    	<var name="module.libs.missing" value="" />
    	<for list="${module.libs}" param="library">
    		<sequential>
    			<if>
    				<not>
    					<isset property="@{library}.available" />
		    		</not>		
    				<then>
    			    	<var name="module.libs.missing" value="${module.libs.missing}," />
    				</then>
		    	</if>
      	    </sequential>
      	</for>

    	<if>
			<not>
	    		<equals arg1="${module.libs.missing}" arg2="" />
			</not>
			<then>
		    	<echo message="Error: Some of the required libraries are not available." />
		    	<echo message="To compile this module, you need the following libaries:" />
		    	<echo message="${module.libs}" />
		    	<echo message="which should be located in ${opencms.input.libs}" />
		
		        <fail>Required libraries missing</fail>
			</then>
    	</if>
    </target>    

    <target name="compile" 
    	depends="checklibs" description="Compiles ${module.name} module classes">
		
		<if>
			<not>
	    		<equals arg1="${src.mode}" arg2="none" />
			</not>
			<then>
                <mkdir dir="${module.output.classes}" /> 
        
                <var name="module.dependencies.path" value="." />
                <for list="${module.dependencies}" param="dependency">
                    <sequential>
						<if>
							<available file="${@{dependency}.output.jar}" />
							<then>
			                    <for param="archive">
				                    <fileset dir="${@{dependency}.output.jar}">
				                      <include name="**/*.jar"/>
				                    </fileset>
			                        <sequential>
				                    	<var name="module.dependencies.path" value="${module.dependencies.path}:@{archive}" />
		                            </sequential>
			                    </for>
							</then>
						</if>
                    </sequential>
                </for>		
                <!--echo message="${module.dependencies.path}" /-->
        
                <var name="module.libs.path" value="." />
                <for list="${module.libs}" param="library">
                    <sequential>
                        <var name="module.libs.path" value="${module.libs.path}:${opencms.input.libs}/@{library}" />
                    </sequential>
                </for>
                <!--echo message="${module.libs.path}" /-->
                
                <if>
                    <equals arg1="${src.mode}" arg2="shared" />
                    <then>
                        <javac 
                            srcdir="${module.input.src.shared}"
                            destdir="${module.output.classes}"
                            debug="on" 
                            optimize="on" 
                            deprecation="on"                        
                            includes="${module.package}/*.java" >
                            <classpath>
                                <fileset dir="${opencms.input.libs}">
                                    <include name="**/*.jar"/>
                                </fileset>
                                <fileset dir="${opencms.core.lib}">
                                    <include name="**/*.jar"/>
                                </fileset>
                                <pathelement path="${module.dependencies.path}"/>
                                <pathelement path="${module.libs.path}"/>
                            </classpath>
                        </javac>
                        <copy todir="${module.output.classes}/${module.package}">
                            <fileset dir="${module.input.src}" includes="${jar.includes.shared}" excludes="${jar.excludes.shared}" />
                        </copy>       
                     </then>
                     <else>
                     	<if>
                            <equals arg1="${src.mode}" arg2="multishared" />
                     		<then>
	                            <for list="${module.packages}" param="mpackage" >
	                                <sequential>
	                                    <var name="package.dir" value="" />
	                                    <for list="@{mpackage}" param="package" delimiter="." >
	                                        <sequential>
	                                            <var name="module.input.src.test" value="${module.input.src.test}/@{package}" />
	    	                                    <var name="package.dir" value="${package.dir}@{package}/" />
	                                        </sequential>
	                                    </for>
	                                    <javac 
	                                        srcdir="${module.input.src.shared}"
	                                        destdir="${module.output.classes}"
	                                        debug="on" 
	                                        optimize="on" 
	                                        deprecation="on"                        
	                                        includes="${package.dir}/*.java" >
	                                        <classpath>
	                                            <fileset dir="${opencms.input.libs}">
	                                                <include name="**/*.jar"/>
	                                            </fileset>
	                                            <fileset dir="${opencms.core.lib}">
	                                                <include name="**/*.jar"/>
	                                            </fileset>
	                                            <pathelement path="${module.dependencies.path}"/>
	                                            <pathelement path="${module.libs.path}"/>
	                                        </classpath>
	                                    </javac>
	                                    <copy todir="${module.output.classes}/${package.dir}">
	                                        <fileset dir="${module.input.src.shared}/${package.dir}" includes="${jar.includes.shared}" excludes="${jar.excludes.shared}" />
	                                    </copy>       
	                                </sequential>
	                            </for>
                            </then>
                            <else>
                                <javac 
                                    srcdir="${module.input.src.single}"
                                    destdir="${module.output.classes}"
                                    debug="on" 
                                    optimize="on" 
                                    deprecation="on" >
                                    <exclude name="**/test/**/*.java" />
                                    <classpath>
                                        <fileset dir="${opencms.input.libs}">
                                            <include name="**/*.jar"/>
                                        </fileset>
                                        <fileset dir="${opencms.core.lib}">
                                            <include name="**/*.jar"/>
                                        </fileset>
                                        <pathelement path="${module.dependencies.path}"/>
                                        <pathelement path="${module.libs.path}"/>
                                    </classpath>
                                </javac>
                               <copy todir="${module.output.classes}">
                                    <fileset dir="${module.input.src.single}" includes="${jar.includes.single}" excludes="${jar.excludes.single}" >
                                        <exclude name="**/test/**" />
                                    </fileset>
                                </copy>       
                            </else>
                     	</if>
                     </else>
                </if>                
			</then>		
		</if>
    </target>
    
    <target name="jar" 
   		depends="compile" description="Generates the .jar file for module ${module.name}">

		<if>
			<not>
	    		<equals arg1="${src.mode}" arg2="none" />
			</not>
			<then>
                <mkdir dir="${module.output.jar}" /> 
               <jar
                    jarfile="${module.output.jar}/${module.name}.jar"
                    basedir="${module.output.classes}" />
                
                <for list="${module.dependencies}" param="dependency">
                    <sequential>
                    	<if>
                    		<available file="${@{dependency}.output.jar}" />
                    		<then>
		                        <copy todir="${module.output.jar}">
		                            <fileset dir="${@{dependency}.output.jar}" includes="*.jar" />
		                        </copy>
                    		</then>
                    	</if>
                    </sequential>
                </for>
			</then>		
		</if>
    </target>

    <target name="dist" 
    	depends="jar" description="Builds the distribution .zip file">
        
    	<mkdir dir="${module.output.zip}" />
		<if>
			<available file="${module.output.jar}" />
			<then>
		    	<if>
		    		<equals arg1="${module.name}" arg2="org.opencms.legacy" />
		    		<then>
		    			<copy 
		    				file="${opencms.input}/modules/org.opencms.legacy/resources/system/login/version.js" 
		    				tofile="${opencms.build}/version.js" overwrite="true">			
		    	    		<filterset>
		    	      			<filter token="OPENCMS_VERSION" value="${version.number} ${version.name}"/>
		    	    		</filterset>			
		    			</copy>
		                <zip destfile="${module.output.zip}/${module.name}_${module.version}.zip" >
		                    <zipfileset dir="${module.output.jar}" prefix="system/modules/${module.name}/lib/" includes="*.jar" />    		
		                    <zipfileset dir="${module.input.res}" prefix="" excludes="${zip.excludes}" >
				       			<exclude name="system/login/version.js" />
							</zipfileset>		                    	
			      			<zipfileset dir="${opencms.build}" prefix="system/login" includes="version.js" />	    			    			
		                </zip>        
		    		</then>
		    		<else>
		                <zip destfile="${module.output.zip}/${module.name}_${module.version}.zip" >
		                    <zipfileset dir="${module.output.jar}" prefix="system/modules/${module.name}/lib/" includes="*.jar" />    		
		                    <zipfileset dir="${module.input.res}" prefix="" excludes="${zip.excludes}" />
		                </zip>        
		    		</else>
		    	</if>
			</then>		
            <else>
		    	<if>
		    		<equals arg1="${module.name}" arg2="org.opencms.legacy" />
		    		<then>
		    			<copy 
		    				file="${opencms.input}/modules/org.opencms.legacy/resources/system/login/version.js" 
		    				tofile="${opencms.build}/version.js" overwrite="true">			
		    	    		<filterset>
		    	      			<filter token="OPENCMS_VERSION" value="${version.number} ${version.name}"/>
		    	    		</filterset>			
		    			</copy>
		                <zip destfile="${module.output.zip}/${module.name}_${module.version}.zip" >
		                    <zipfileset dir="${module.input.res}" prefix="" excludes="${zip.excludes}" >
				       			<exclude name="system/login/version.js" />
							</zipfileset>		                    	
			      			<zipfileset dir="${opencms.build}" prefix="system/login" includes="version.js" />	    			    			
		                </zip>        
		    		</then>
		    		<else>
		                <zip destfile="${module.output.zip}/${module.name}_${module.version}.zip" >
		                    <zipfileset dir="${module.input.res}" prefix="" excludes="${zip.excludes}" />
		                </zip>        
		    		</else>
		    	</if>
            </else>
		</if>
                
    </target>

    <target name="tomcat.copy" 
    	depends="dist" description="Copies module resources to Tomcat directory">       
        
		<if>
			<available file="${module.output.jar}" />
			<then>
		        <copy todir="${tomcat.home}/webapps/${app.name}/WEB-INF/lib" >    	
		        	<fileset dir="${module.output.jar}" includes="*.jar"/>
		    	</copy>
			</then>		
		</if>
    	<copy file="${module.output.zip}/${module.name}_${module.version}.zip" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/packages/modules" />
    </target>

    <target name="tomcat.update" 
    	depends="tomcat.copy" description="Recompile changes and installs them in Tomcat webapps directory"/>

    <target name="tomcat.all" 
    	depends="clean, tomcat.update" description="Does a complete recompile of the module and installs it in Tomcat webapps directory"/>              

</project>
