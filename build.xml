<?xml version="1.0" encoding="UTF-8"?>

<project name="OpenCms" default="compile" basedir=".">

    <property name="version.number"             		value="6.2.0" />    
    
	<property name="app.name" 							value="opencms" />
	<property name="src.all.comps" 						value="src-modules,src-components,test,webapp" />
	
    <property name="opencms.input" 						location="${basedir}" />
    <property name="opencms.output"						location="${basedir}/../" />    	

    <property name="opencms.build"			            location="${opencms.output}/build" />
    <property name="opencms.output.classes"             location="${opencms.output}/build/classes-core" />
    <property name="opencms.output.tests"               location="${opencms.output}/build/test" />
    <property name="opencms.output.jars"                location="${opencms.output}/build/jars-core" />
    <property name="opencms.output.warfiles"            location="${opencms.output}/build/${app.name}" />
    <property name="opencms.output.distfiles"           location="${opencms.output}/zip" />    

    <property name="opencms.input.updater"            	location="${opencms.input}/modules/org.opencms.updater/resources" />
    <property name="opencms.input.warfiles"            	location="${opencms.input}/webapp" />
    <property name="opencms.input.webinf" 				location="${opencms.input.warfiles}/WEB-INF" />
    <property name="opencms.input.libs" 				location="${opencms.input.webinf}/lib" />
    <property name="opencms.input.externlibs" 			location="${opencms.output}/lib" />
    <property name="opencms.input.defaultconfiguration" location="${opencms.input.warfiles}/WEB-INF/config/opencms.properties" />
    <property name="opencms.input.default.registry"		location="${opencms.input.warfiles}/WEB-INF/config/registry.xml" />
    <property name="opencms.input.default.config"		location="${opencms.input.warfiles}/WEB-INF/config/opencms.xml" />
    <property name="opencms.input.default.system"		location="${opencms.input.warfiles}/WEB-INF/config/opencms-system.xml" />
        
    <property name="opencms.inputlib.servlet"     		location="${opencms.input.libs}/servlet.jar" />
    <property name="opencms.inputlib.activation"  		location="${opencms.input.libs}/activation.jar" />
    <property name="opencms.inputlib.mail"        		location="${opencms.input.libs}/mail.jar" />
    <property name="opencms.inputlib.xerces"      		location="${opencms.input.libs}/xercesImpl-2.6.2.jar" />
    <property name="opencms.inputlib.xml-apis"      	location="${opencms.input.libs}/xml-apis-2.6.2.jar" />
    <property name="opencms.inputlib.oro"         		location="${opencms.input.libs}/jakarta-oro-2.0.8.jar" />
    <property name="opencms.inputlib.tidy"        		location="${opencms.input.libs}/jtidy-r8-05102004.jar" />
    <property name="opencms.inputlib.uuid"        		location="${opencms.input.libs}/jug-1.1.2.jar" />   
    <property name="opencms.inputlib.simapi"        	location="${opencms.input.libs}/alkacon-simapi-0.9.3.jar" />
    <property name="opencms.inputlib.diff"        	    location="${opencms.input.libs}/alkacon-diff-0.9.1.jar" />
    <property name="opencms.inputlib.codec"        		location="${opencms.input.libs}/commons-codec-1.3.jar" />
    <property name="opencms.inputlib.email"        		location="${opencms.input.libs}/commons-email-1.0-mod.jar" />
    <property name="opencms.inputlib.dbcp"        		location="${opencms.input.libs}/commons-dbcp-1.2.1.jar" />
    <property name="opencms.inputlib.digester"        	location="${opencms.input.libs}/commons-digester-1.7.jar" />
    <property name="opencms.inputlib.pool"        		location="${opencms.input.libs}/commons-pool-1.2.jar" />    
    <property name="opencms.inputlib.logging"     		location="${opencms.input.libs}/commons-logging-1.0.4.jar" /> 
    <property name="opencms.inputlib.collections"     	location="${opencms.input.libs}/commons-collections-3.1.jar" />
    <property name="opencms.inputlib.beanutils"   		location="${opencms.input.libs}/commons-beanutils-1.7.0.jar" />
    <property name="opencms.inputlib.fileupload"   		location="${opencms.input.libs}/commons-fileupload-1.0.jar" />
    <property name="opencms.inputlib.httpclient"   		location="${opencms.input.libs}/commons-httpclient-2.0.2.jar" />
    <property name="opencms.inputlib.log4j"     		location="${opencms.input.libs}/log4j-1.2.9.jar" /> 
    <property name="opencms.inputlib.dom4j"     		location="${opencms.input.libs}/dom4j-1.6.1.jar" />
    <property name="opencms.inputlib.quartz"     		location="${opencms.input.libs}/quartz-1.4.5.jar" />
    <property name="opencms.inputlib.jaxen"     		location="${opencms.input.libs}/jaxen-1.1-beta-4.jar" />
    <property name="opencms.inputlib.htmlparser"		location="${opencms.input.libs}/htmlparser-1.5-20050925.jar" />
    <property name="opencms.inputlib.lucene.core"		location="${opencms.input.libs}/lucene-core-1.9.1.jar" />
    <property name="opencms.inputlib.lucene.analyzers"	location="${opencms.input.libs}/lucene-analyzers-1.9.1.jar" />
    <property name="opencms.inputlib.lucene.snowball"	location="${opencms.input.libs}/lucene-snowball-1.9.1.jar" />
	<property name="opencms.inputlib.poi"				location="${opencms.input.libs}/poi-2.5.1-final-20040804.jar" />
    <property name="opencms.inputlib.pdfbox"			location="${opencms.input.libs}/PDFBox-0.7.0.jar" />
    <property name="opencms.inputlib.textextraction"	location="${opencms.input.libs}/tm-extractors-0.4.jar" />
    <property name="opencms.inputlib.junit"      		location="${opencms.input.libs}/junit-3-8-1.jar" /> 
    <property name="opencms.inputlib.jstl"	            location="${opencms.input.libs}/jstl-1.0.6.jar" />
    <property name="opencms.inputlib.standard"          location="${opencms.input.libs}/standard-1.0.6.jar" /> 	
    <property name="opencms.inputlib.oracle"      		location="${opencms.input.externlibs}/ojdbc14.jar" /> 
	<property name="drivers.vfs"						value="db" />
	<property name="drivers.project"					value="db" />
	<property name="drivers.user"						value="db" />
	<property name="drivers.workflow"					value="db" />
	<property name="drivers.backup"						value="db" />
	<property name="db.additional.pools" 				value="" />
	<property name="drivers.configuration"				value="" />
	<property name="registry.configuration"				value="" />
	<property name="opencms.configuration"				value="" />
	<property name="system.runtimeinfo"					value="org.opencms.db.CmsDbContextFactory" />

    <property name="excludes"                   		value="**/CVS/*,**/.nbattrs,**/.project,**/.classpath" />
    
    <property environment="env" />
	
	<!-- comma separated list of jar archives to be removed during update -->
	<property name="updater.jars.remove"				value="ant-opencms-1.0.jar,dom4j-1.5.2.jar,htmlparser-1.5-20050313.jar,jstl-1.1.2.jar,lucene-1.4.3.jar,snowball-1.0.jar,standard-1.1.2.jar" />
	<!-- comma separated list of files in WEB-INF/ to be updated -->
	<property name="updater.webinf.files"				value="opencms.tld,web.xml,cmsshell.sh" />

 	<taskdef resource="net/sf/antcontrib/antlib.xml" loaderref="contrib">
	  <classpath>
	    <pathelement location="${opencms.input.libs}/ant-contrib-1.0b1.jar"/>
	  </classpath>
	</taskdef>
	
	<taskdef resource="org/opencms/util/ant/taskdefs.properties" loaderref="opencms"> 
	  <classpath>
	    <pathelement location="${opencms.input.libs}/ant-opencms-1.1.jar"/>
	  </classpath>
	</taskdef>

	<!-- 
	  -	Checks if all required libraries are available
	  -->
    <target name="init" >
    	
        <condition property="libsAvailable">
            <and>
                <available file="${opencms.inputlib.servlet}"/>
                <available file="${opencms.inputlib.activation}"/>
                <available file="${opencms.inputlib.mail}"/>
                <available file="${opencms.inputlib.xerces}"/>
                <available file="${opencms.inputlib.xml-apis}"/>
                <available file="${opencms.inputlib.oro}"/>
                <available file="${opencms.inputlib.tidy}"/>
                <available file="${opencms.inputlib.uuid}"/>                
                <available file="${opencms.inputlib.pool}"/> 
                <available file="${opencms.inputlib.simapi}"/>
            	<available file="${opencms.inputlib.diff}"/>
                <available file="${opencms.inputlib.codec}"/>
                <available file="${opencms.inputlib.email}"/>
                <available file="${opencms.inputlib.dbcp}"/>
                <available file="${opencms.inputlib.digester}"/>
                <available file="${opencms.inputlib.logging}"/>
                <available file="${opencms.inputlib.collections}"/> 
                <available file="${opencms.inputlib.beanutils}"/> 
                <available file="${opencms.inputlib.fileupload}"/>
                <available file="${opencms.inputlib.httpclient}"/>
                <available file="${opencms.inputlib.dom4j}"/> 
                <available file="${opencms.inputlib.quartz}"/> 
                <available file="${opencms.inputlib.log4j}"/> 
                <available file="${opencms.inputlib.htmlparser}"/>
                <available file="${opencms.inputlib.lucene.core}"/>
				<available file="${opencms.inputlib.lucene.analyzers}"/>
    			<available file="${opencms.inputlib.lucene.snowball}"/>
                <available file="${opencms.inputlib.poi}"/>
                <available file="${opencms.inputlib.pdfbox}"/> 
                <available file="${opencms.inputlib.jstl}"/>
                <available file="${opencms.inputlib.standard}"/>             	
                <available file="${opencms.inputlib.textextraction}"/> 
            </and>            
        </condition>

        <condition property="build.excludes" value="org/opencms/db/oracle/**,org/opencms/db/oracle8/**">
            <not>
            	<available file="${opencms.inputlib.oracle}"/>
            </not>
        </condition>           
        
        <condition property="build.excludes" value="">
            <or>
            	<available file="${opencms.inputlib.oracle}"/>
           	</or>
        </condition> 
        
        <condition property="tomcat.home" value="${env.TOMCAT_HOME}">
            <available file="${env.TOMCAT_HOME}" type="dir"/>
        </condition>

        <condition property="tomcat.home" value="${env.CATALINA_HOME}">
            <available file="${env.CATALINA_HOME}" type="dir"/>
        </condition>
    
        <tstamp>
            <format property="timestamp" pattern="yyyy.MM.dd-HH.mm"/>
        </tstamp>
        <property name="version.number" value="${env.USERNAME}_${timestamp}"/>
        
        <echo message="Building OpenCms ${version.number}" />
        <echo message=" " />
        <echo message="OpenCms input directory is: ${opencms.input}" />
        <echo message="OpenCms output directory is: ${opencms.output}" />
        <echo message="Java version detected: ${ant.java.version}"/>
        <echo message="Java home is: ${env.JAVA_HOME}"/>
    	<echo message="Tomcat home is: ${tomcat.home}" />        
        <echo message="Excluding from build: ${build.excludes}" />
    </target>
    
    
	<!-- 
	  -	Stop target if libraries required for compilation are missing
	  -->
    <target name="checklibs" 
    	depends="init" unless="libsAvailable" >
    	
        <fail>
        
Error: Some of the required libraries are not available.

To compile OpenCms, you need the following libaries:
${opencms.inputlib.servlet}
${opencms.inputlib.activation}
${opencms.inputlib.mail}
${opencms.inputlib.xerces}
${opencms.inputlib.xml-apis}
${opencms.inputlib.oro}
${opencms.inputlib.tidy}
${opencms.inputlib.uuid}
${opencms.inputlib.pool}
${opencms.inputlib.simapi}
${opencms.inputlib.diff}
${opencms.inputlib.codec}
${opencms.inputlib.email}
${opencms.inputlib.dbcp}
${opencms.inputlib.digester}
${opencms.inputlib.logging}
${opencms.inputlib.collections}
${opencms.inputlib.beanutils}
${opencms.inputlib.fileupload}
${opencms.inputlib.httpclient}
${opencms.inputlib.dom4j}
${opencms.inputlib.quartz}
${opencms.inputlib.log4j}
${opencms.inputlib.htmlparser}
${opencms.inputlib.lucene.core}
${opencms.inputlib.lucene.analyzers}
${opencms.inputlib.lucene.snowball}
${opencms.inputlib.poi}
${opencms.inputlib.pdfbox}
${opencms.inputlib.jstl}
${opencms.inputlib.standard}
${opencms.inputlib.textextraction}

        </fail>
    </target>


    <target name="clean" 
    	description="Delete existing ouput directories">
    	
        <delete dir="${opencms.output.tests}" />
        <delete dir="${opencms.output.warfiles}" />
        <delete dir="${opencms.output}/build" />
        <delete dir="${opencms.output.distfiles}" />
    </target>
    
    		
    <target name="compile" 
    	depends="checklibs" if="libsAvailable" description="Compile the OpenCms classes">
    	
        <mkdir dir="${opencms.output.classes}" />    	
    	
        <uptodate property="classesUpToDate" targetfile="${opencms.output.jars}/opencms.jar">
        	<srcfiles dir= "${opencms.input}/src" includes="**/*.java" excludes="${build.excludes},${excludes}"/>
        	<srcfiles dir= "${opencms.input}/src" includes="**/*.properties,**/*.txt,**/*.xml,**/*.xsd,**/*.dtd,**/*.sql" excludes="${excludes}" />
        </uptodate>
            	
       	<javac
            srcdir="${opencms.input}/src"
            destdir="${opencms.output.classes}"
            excludes="${build.excludes}"
            classpath="${opencms.inputlib.servlet}:
                       ${opencms.inputlib.activation}:
                       ${opencms.inputlib.mail}:
                       ${opencms.inputlib.xerces}:
                       ${opencms.inputlib.xml-apis}:
                       ${opencms.inputlib.oracle}:
                       ${opencms.inputlib.mysql}:
                       ${opencms.inputlib.postgresql}:
                       ${opencms.inputlib.oro}:
                       ${opencms.inputlib.tidy}:
                       ${opencms.inputlib.simapi}:
       		           ${opencms.inputlib.diff}:
                       ${opencms.inputlib.codec}:
                       ${opencms.inputlib.email}:
                       ${opencms.inputlib.dbcp}:
                       ${opencms.inputlib.pool}:
                       ${opencms.inputlib.digester}:
                       ${opencms.inputlib.logging}:
                       ${opencms.inputlib.collections}:
                       ${opencms.inputlib.beanutils}:
                       ${opencms.inputlib.fileupload}:
                       ${opencms.inputlib.httpclient}:
                       ${opencms.inputlib.dom4j}:
                       ${opencms.inputlib.quartz}:
                       ${opencms.inputlib.log4j}:
                       ${opencms.inputlib.htmlparser}:
                       ${opencms.inputlib.uuid}:
                       ${opencms.inputlib.lucene.core}:
    				   ${opencms.inputlib.lucene.analyzers}:
    				   ${opencms.inputlib.lucene.snowball}:
                       ${opencms.inputlib.poi}:
                       ${opencms.inputlib.jstl}:
                       ${opencms.inputlib.standard}:       		
                       ${opencms.inputlib.textextraction}:
                       ${opencms.inputlib.pdfbox}"
            debug="on"
            optimize="on"
            deprecation="on"
       		source="1.4"
    		target="1.4">
       		<!-- compilerarg value="-Xlint:unchecked"/ -->
       	</javac>
		
        <copy todir="${opencms.output.classes}">
            <fileset dir="${opencms.input}/src" includes="**/*.properties,**/*.txt,**/*.xml,**/*.xsd,**/*.dtd,**/*.sql" excludes="${excludes}"/>
        </copy>              
                
        <antcall target="versioninfo" />        
    </target>

    
	<!-- 
	  -	Generate version information files
	  -->
    <target name="versioninfo" unless="classesUpToDate" >

		<copy 
			file="${opencms.input.warfiles}/WEB-INF/setupdata/version.properties" 
			tofile="${opencms.output.classes}/org/opencms/main/version.properties" overwrite="true">			
    		<filterset>
      			<filter token="OPENCMS_VERSION_NUMBER" value="${version.number}"/>
      			<filter token="OPENCMS_VERSION_NAME" value="${version.name}"/>
    		</filterset>			
		</copy>		
      				    	
		<copy 
			file="${opencms.input.warfiles}/setup/versions.txt" 
			tofile="${opencms.output.classes}/versions.txt" overwrite="true">			
    		<filterset>
      			<filter token="OPENCMS_VERSION" value="OpenCms ${version.number}"/>
    		</filterset>			
		</copy>
    	
		<copy 
			file="${opencms.input.warfiles}/setup/license.html" 
			tofile="${opencms.output.classes}/license.html" overwrite="true">			
    		<filterset>
      			<filter token="OPENCMS_VERSION_NUMBER" value="${version.number}"/>
      			<filter token="OPENCMS_VERSION_NAME" value="${version.name}"/>
    		</filterset>			
		</copy>    	
       	
	   	<copy 
	   		file="${opencms.input.defaultconfiguration}" 
	   		tofile="${opencms.output.classes}/opencms.properties" overwrite="true">	   		
    		<filterset>
      			<filter token="DRIVERS_VFS" value="${drivers.vfs}"/>
      			<filter token="DRIVERS_PROJECT" value="${drivers.project}"/>
      			<filter token="DRIVERS_USER" value="${drivers.user}"/>
      			<filter token="DRIVERS_WORKFLOW" value="${drivers.workflow}"/>
      			<filter token="DRIVERS_BACKUP" value="${drivers.backup}"/>    			
      			<filter token="DRIVERS_CONFIGURATION" value="${drivers.configuration}"/>
    			<filter token="ADDITIONAL_DB_POOLS" value="${db.additional.pools}"/>
    		</filterset>
	   	</copy>       	  
    	
	   	<copy 
	   		file="${opencms.input.default.config}" 
	   		tofile="${opencms.output.classes}/opencms.xml" overwrite="true">	   		
    		<filterset>
      			<filter token="OPENCMS_CONFIGURATION" value="${opencms.configuration}"/>
    		</filterset>	   		
	   	</copy>	   		   	

	   	<copy 
	   		file="${opencms.input.default.system}" 
	   		tofile="${opencms.output.classes}/opencms-system.xml" overwrite="true">	   		
    		<filterset>
      			<filter token="RUNTIME_INFO" value="${system.runtimeinfo}"/>
    		</filterset>	   		
	   	</copy>	   		   	
	</target>
    		    

    <target name="jar" 
    	depends="compile" description="Generate the OpenCms .jar files">
    	
        <mkdir dir="${opencms.output.jars}" />
            	
        <jar
            jarfile="${opencms.output.jars}/opencms.jar"
            basedir="${opencms.output.classes}"
            includes="org/opencms/**" >      
            <metainf dir="${opencms.input.warfiles}/WEB-INF" includes="opencms.tld"/>
        </jar>        	            
    </target>

	<!-- 
		Set/Override this property to one of the following values: 
		- interactive: interactive GUI based module selection.
		- selection: module selection based on modules.common.selection property
		- all: module selection based on modules.common.all property defined in the all-modules.properties file
	-->
	<property name="modules.selection.mode"				value="interactive" />
	
    <target name="build.updater" 
    	depends="jar" description="Generates a distributable updater zip file">
    	
    	<property file="${basedir}/modules/all-modules.properties" />
    	<echo message="all: ${basedir}/modules"/>
    	<if>
    		<not><isset property="modules.common.all" /></not>
    	  <then>
    		<fail>
    			property modules.common.all undefined.
    		</fail>
    	  </then>
    	</if>
        <sortlist property="modules.all.sort" value="${modules.common.all}" override="true" />
	  	<echo message="all: ${modules.all.sort}"/>
		<property name="modules.var" value="${modules.all.sort}" />
	  	<ant antfile="${basedir}/modules/build.xml" target="dist" inheritAll="false" >
	  		<property name="modules.selection.mode" value="selection" />
	  		<property name="modules.common.selection" value="${modules.var}" />
	  	</ant>

    	<delete failonerror="no" file="${opencms.output.distfiles}/opencms-updater.zip" />
    	<zip
            zipfile="${opencms.output.distfiles}/opencms-updater.zip"
            basedir="${opencms.input.updater}"
            includes="**" excludes="empty.jar">
    	</zip>

    	<for list="${modules.var}" param="module" trim="yes">
    	  <sequential>
        	<if>
        		<not>
        			<or>
			    		<equals arg1="@{module}" arg2="org.opencms.workplace.demos" />
			    		<equals arg1="@{module}" arg2="org.opencms.workplace.demos.list" />
			    		<equals arg1="@{module}" arg2="org.opencms.workplace.demos.widget" />
        			</or>
        		</not>
				<then>
		    	  	<zip zipfile="${opencms.output.distfiles}/opencms-updater.zip" update="true" whenempty="fail">
		            	<zipfileset dir="${opencms.output.distfiles}" prefix="update/modules" includes="@{module}_*.zip" />
		    	  	</zip>
		        	<if>
			    		<available file="${opencms.output}/build/jars-@{module}" />
						<then>
				    	  	<zip zipfile="${opencms.output.distfiles}/opencms-updater.zip" update="true" whenempty="fail">
				            	<zipfileset dir="${opencms.output}/build/jars-@{module}" prefix="WEB-INF/lib" includes="@{module}.jar" />
				    	  	</zip>
						</then>
					</if>
		        	<if>
			    		<available file="${opencms.input}/modules/@{module}/resources/system/modules/@{module}/lib" />
						<then>
				    	  	<zip zipfile="${opencms.output.distfiles}/opencms-updater.zip" update="true" whenempty="fail">
				            	<zipfileset dir="${opencms.input}/modules/@{module}/resources/system/modules/@{module}/lib" prefix="WEB-INF/lib" includes="*.jar" />
				    	  	</zip>
						</then>
					</if>
				</then>
			</if>    	  	
    	  </sequential>
    	</for>
    	
	  	<zip zipfile="${opencms.output.distfiles}/opencms-updater.zip" update="true" whenempty="fail">
        	<zipfileset dir="${opencms.input.libs}" prefix="WEB-INF/lib" includes="*.jar" />
	  	</zip>
    	
    	<for list="${updater.jars.remove}" param="jarfile" delimiter="," trim="yes">
    	  <sequential>
            <copy file="${opencms.input.updater}/empty.jar" tofile="${opencms.output}/build/jars-core/@{jarfile}"/>
      	  </sequential>
		</for>
    	
	  	<zip zipfile="${opencms.output.distfiles}/opencms-updater.zip" update="true" whenempty="fail">
        	<zipfileset dir="${opencms.output}/build/jars-core/" prefix="WEB-INF/lib" includes="*.jar" />
	  	</zip>
    	
	  	<zip zipfile="${opencms.output.distfiles}/opencms-updater.zip" update="true" whenempty="fail">
        	<zipfileset dir="${opencms.input.webinf}" prefix="WEB-INF" includes="${updater.webinf.files}" />
	  	</zip>
    	
    </target>

    <target name="war" 
    	depends="jar" description="Builds the opencms.war">
        
        <war 
        	destfile="${opencms.output}/build/${app.name}.war" 
        	webxml="${opencms.input.warfiles}/WEB-INF/web.xml"
        	manifest="${opencms.input.warfiles}/META-INF/MANIFEST.MF">
        	     		
       		<lib dir="${opencms.output.jars}">
       			<include name="*.jar" />
       		</lib>
       		<lib dir="${opencms.input.libs}">
       			<exclude name="servlet.jar" />
       			<exclude name="junit.jar" />
       			<exclude name="${libexcludes1}" />
       			<exclude name="${libexcludes2}" />
       			<exclude name="${libexcludes3}" />
       			<exclude name="${excludes}" />       			
       		</lib>     		
       		<fileset dir="${opencms.input.warfiles}">       		
       			<exclude name="WEB-INF/web.xml" />
       			<exclude name="WEB-INF/lib/*" />
       			<exclude name="WEB-INF/config/opencms.properties" />
       			<exclude name="WEB-INF/config/opencms-system.xml" />
       			<exclude name="WEB-INF/config/opencms.xml" />
       			<exclude name="WEB-INF/config/registry.xml" />
       			<exclude name="setup/versions.txt" />
       			<exclude name="setup/license.html" />
       			<exclude name="build.xml,.*,${excludes}" />
       		</fileset>
  			<zipfileset dir="${opencms.output.classes}" prefix="WEB-INF/config" includes="opencms.properties" />
  			<zipfileset dir="${opencms.output.classes}" prefix="WEB-INF/config" includes="opencms-system.xml" />
  			<zipfileset dir="${opencms.output.classes}" prefix="WEB-INF/config" includes="registry.xml" />  			
  			<zipfileset dir="${opencms.output.classes}" prefix="WEB-INF/config" includes="opencms.xml" />  			
  			<zipfileset dir="${opencms.output.classes}" prefix="setup" includes="versions.txt" />
			<zipfileset dir="${opencms.output.classes}" prefix="setup" includes="license.html" />
        </war>        
    </target>
    

    <target name="tomcat.copy" 
    	description="Copy updated files to Tomcat directorys">

       	<copy todir="${tomcat.home}/webapps/${app.name}/WEB-INF/lib">
            <fileset dir="${opencms.input.libs}">
                <include name="**/*.jar"/>
                <include name="**/*.zip"/>
                <exclude name="**/servlet.jar"/>
                <exclude name="**/junit.jar"/>
                <exclude name="${excludes}" />
            </fileset>
        </copy>    	
        <copy todir="${tomcat.home}/webapps/${app.name}/WEB-INF/lib">
            <fileset dir="${opencms.output.jars}">
                <include name="*.jar"/>
                <include name="*.zip"/>
                <exclude name="**/servlet.jar"/>
                <exclude name="**/junit.jar"/>
                <exclude name="${excludes}" />
            </fileset>
        </copy>     
        <copy file="${opencms.input.warfiles}/WEB-INF/web.xml" todir="${tomcat.home}/webapps/${app.name}/WEB-INF"/>
        <copy file="${opencms.input.warfiles}/WEB-INF/opencms.tld" todir="${tomcat.home}/webapps/${app.name}/WEB-INF"/>       
    </target>     
    
    
    <target name="tomcat.update" 
    	depends="jar, tomcat.copy" description="Recompile changed classes and install in Tomcat webapps directory"/>      

    <target name="tomcat.all" 
    	depends="clean, tomcat.update" description="Do a complete recompile of all classes and install in Tomcat webapps directory"/>              
    
    <target name="jboss.copy" 
    	description="Copy updated files to JBoss directory">

       	<copy todir="${jboss.home}/server/default/deploy/${app.name}.war/WEB-INF/lib">
            <fileset dir="${opencms.input.libs}">
                <include name="**/*.jar"/>
                <include name="**/*.zip"/>
                <exclude name="**/servlet.jar"/>
                <exclude name="**/junit.jar"/>
                <exclude name="${excludes}" />
            </fileset>
        </copy>    	
        <copy todir="${jboss.home}/server/default/deploy/${app.name}.war/WEB-INF/lib">
            <fileset dir="${opencms.output.jars}">
                <include name="*.jar"/>
                <include name="*.zip"/>
                <exclude name="**/servlet.jar"/>
                <exclude name="**/junit.jar"/>
                <exclude name="${excludes}" />
            </fileset>
        </copy>     
        <copy file="${opencms.input.warfiles}/WEB-INF/web.xml" todir="${jboss.home}/server/default/deploy/${app.name}.war/WEB-INF"/>
        <copy file="${opencms.input.warfiles}/WEB-INF/opencms.tld" todir="${jboss.home}/server/default/deploy/${app.name}.war/WEB-INF"/>       
    </target>     
       
    <target name="jboss.update" 
    	depends="jar, jboss.copy" description="Recompile changed classes and install in JBoss deploy directory"/>      
    
    <target name="bindist" 
    	depends="clean" description="Creates a binary distribution ZIP, including the templateone demopages">
    	
    	<!-- read list of all available modules -->
    	<property file="${opencms.input}/modules/all-modules.properties" />
    	
    	<var name="modules.common.selection" value="${modules.common.all}" />
    	
    	<!-- build war with selected modules -->
	  	<ant antfile="${opencms.input}/modules/build.xml" target="war" inheritAll="false" >
	  		<property name="modules.common.selection" value="${modules.common.selection}" />
	  		<property name="modules.selection.mode" value="selection" />
	  		<property name="app.name" value="${app.name}" />
	  	</ant>    	
    	
    	<!-- build distro -->
        <mkdir dir="${opencms.output.distfiles}" />                    
    	
        <zip destfile="${opencms.output.distfiles}/opencms_${version.number}.zip">
            <zipfileset dir="${opencms.output}/build" includes="${app.name}.war"/>
            <zipfileset dir="${opencms.input}" includes="install.html,license.txt,history.txt"/>
        </zip>

    </target>    
    
    <target name="srcdist" 
    	description="Creates a source distribution ZIP">
    	
    	<echo message="Building OpenCms ${app.name} source distribution " />
        <echo message=" " />
        <echo message="OpenCms input directory is: ${opencms.input}" />
        <echo message="OpenCms output directory is: ${opencms.output}" />
		
	  	<selectionprompt 
	  	  	property="src.comps"
	  	    defaultvalue="${src.all.comps}"
	  		allvalues="${src.all.comps}"
	  		prompt="Please select the additional source components to include:"
	  		title="Additional Source Components Selection" 
	  		columns="1" 
	  	/>

        <mkdir dir="${opencms.output.distfiles}" />                    
		
        <zip destfile="${opencms.output.distfiles}/${app.name}_${version.number}_src.zip">
        	<zipfileset dir="${opencms.input}/src" excludes="${excludes}" prefix="src" />
            <zipfileset dir="${opencms.input}" includes="build.xml,install.html,license.txt,history.txt"/>
        </zip>
    	
	    <if>
	      <not>
		      <equals arg1="${src.comps}" arg2="__ABORT__" />
	      </not>
	      <then>
	    	<for list="${src.comps}" param="comp" trim="yes">
	    	  <sequential>
	            <zip destfile="${opencms.output.distfiles}/${app.name}_${version.number}_src.zip" update="true" whenempty="fail">
	            	<zipfileset dir="${opencms.input}/@{comp}" excludes="${excludes}" prefix="@{comp}" />
	            </zip>
	    	  </sequential>
	    	</for>
	      </then>
	    </if>

    </target>
		
    <target name="compile-tests" 
    	depends="jar" if="libsAvailable" description="Compile the OpenCms test classes">
    	
        <mkdir dir="${opencms.output.tests}" />    	
    	
        <uptodate property="classesUpToDate" targetfile="${opencms.output.jars}/opencms-tests.jar">
        	<srcfiles dir= "${opencms.input}/test" includes="**/*.java" excludes="${build.excludes},${excludes},**/data/**"/>
        	<srcfiles dir= "${opencms.input}/test" includes="**/*.properties,**/*.txt,**/*.xml,**/*.xsd,**/*.dtd" excludes="${excludes},**/data/**" />
        </uptodate>
            	
       	<javac
            srcdir="${opencms.input}/test"
            destdir="${opencms.output.tests}"
            excludes="${build.excludes},**/data/**"
            classpath="${opencms.output.jars}/opencms.jar:
                       ${opencms.inputlib.junit}:
		               ${opencms.inputlib.servlet}:
                       ${opencms.inputlib.activation}:
                       ${opencms.inputlib.mail}:
                       ${opencms.inputlib.xerces}:
                       ${opencms.inputlib.xml-apis}:
                       ${opencms.inputlib.oracle}:
                       ${opencms.inputlib.mysql}:
                       ${opencms.inputlib.postgresql}:
                       ${opencms.inputlib.oro}:
                       ${opencms.inputlib.tidy}:
                       ${opencms.inputlib.simapi}:
       		           ${opencms.inputlib.diff}:
                       ${opencms.inputlib.codec}:
                       ${opencms.inputlib.email}:
                       ${opencms.inputlib.dbcp}:
                       ${opencms.inputlib.pool}:
                       ${opencms.inputlib.digester}:
                       ${opencms.inputlib.logging}:
                       ${opencms.inputlib.collections}:
                       ${opencms.inputlib.beanutils}:
                       ${opencms.inputlib.fileupload}:
                       ${opencms.inputlib.httpclient}:
                       ${opencms.inputlib.dom4j}:
                       ${opencms.inputlib.quartz}:
                       ${opencms.inputlib.log4j}:
                       ${opencms.inputlib.htmlparser}:
                       ${opencms.inputlib.uuid}:
                       ${opencms.inputlib.lucene.core}:
    				   ${opencms.inputlib.lucene.analyzers}:
					   ${opencms.inputlib.lucene.snowball}:
                       ${opencms.inputlib.poi}:
       		           ${opencms.inputlib.jstl}:
       		           ${opencms.inputlib.standard}:
                       ${opencms.inputlib.textextraction}:
                       ${opencms.inputlib.pdfbox}"
            debug="on"
            optimize="on"
            deprecation="on" 
       		source="1.4"
    		target="1.4"/>
		
        <copy todir="${opencms.output.tests}">
            <fileset dir="${opencms.input}/test" includes="**/*.properties,**/*.txt,**/*.xml,**/*.xsd,**/*.dtd" excludes="${excludes},**/data/**"/>
        </copy>
    	
        <mkdir dir="${opencms.output.tests}/../webapp/" />      	
        <copy todir="${opencms.output.tests}/../webapp/">
            <fileset dir="${opencms.input.warfiles}" />
        </copy>       	    	       
    	
        <mkdir dir="${opencms.output.tests}/../test/data/" />  
        <copy todir="${opencms.output.tests}/../test/data/">
            <fileset dir="${opencms.input}/test/data" />
        </copy>       	    	       
    </target>
	

	<target name="unittests" depends="compile-tests"
		description="Runs the core Junit test cases">
		
		<junit showoutput="no" printsummary="yes" fork="yes" haltonfailure="no" haltonerror="yes">
			<classpath>
				<pathelement path="${opencms.output.tests}"/>
				<pathelement location="${opencms.output.jars}/opencms.jar"/>
				<pathelement location="${opencms.inputlib.fileupload}"/>
				<pathelement location="${opencms.inputlib.servlet}"/>				
				<pathelement location="${opencms.inputlib.mail}"/>
				<pathelement location="${opencms.inputlib.xerces}"/>
				<pathelement location="${opencms.inputlib.xml-apis}"/>
				<pathelement location="${opencms.inputlib.oracle}"/>
				<pathelement location="${opencms.inputlib.mysql}"/>
				<pathelement location="${opencms.inputlib.postgresql}"/>
				<pathelement location="${opencms.inputlib.oro}"/>
				<pathelement location="${opencms.inputlib.tidy}"/>
				<pathelement location="${opencms.inputlib.simapi}"/>
				<pathelement location="${opencms.inputlib.diff}"/>
				<pathelement location="${opencms.inputlib.codec}"/>
				<pathelement location="${opencms.inputlib.email}"/>
				<pathelement location="${opencms.inputlib.dbcp}"/>
				<pathelement location="${opencms.inputlib.fileupload}"/>
				<pathelement location="${opencms.inputlib.pool}"/>
				<pathelement location="${opencms.inputlib.digester}"/>
				<pathelement location="${opencms.inputlib.logging}"/>
				<pathelement location="${opencms.inputlib.collections}"/>
				<pathelement location="${opencms.inputlib.beanutils}"/>
				<pathelement location="${opencms.inputlib.httpclient}"/>
				<pathelement location="${opencms.inputlib.dom4j}"/>
				<pathelement location="${opencms.inputlib.quartz}"/>
				<pathelement location="${opencms.inputlib.log4j}"/>
				<pathelement location="${opencms.inputlib.htmlparser}"/>
				<pathelement location="${opencms.inputlib.uuid}"/>
				<pathelement location="${opencms.inputlib.lucene.core}"/>
				<pathelement location="${opencms.inputlib.lucene.analyzers}"/>
				<pathelement location="${opencms.inputlib.lucene.snowball}"/>
				<pathelement location="${opencms.inputlib.poi}"/>
				<pathelement location="${opencms.inputlib.jaxen}"/>
				<pathelement location="${opencms.inputlib.pdfbox}"/>
				<pathelement location="${opencms.inputlib.standard}"/>
				<pathelement location="${opencms.inputlib.jstl}"/>				
				<pathelement location="${opencms.inputlib.textextraction}"/>
			</classpath>
			
			<formatter type="plain" />
			
			<test name="org.opencms.xml.content.AllTests" />			
		</junit>
	</target>
</project>