<?xml version="1.0" encoding="UTF-8"?>

<project name="OpenCms" default="compile" basedir=".">

    <property name="version.number"             		value="5.1.11" />    
    <property name="version.name"               		value="Salusa Secundus" />
    
	<property name="app.name" 							value="opencms" />
    
    <property name="opencms.input" 						location="${basedir}" />
    <property name="opencms.output"						location="${basedir}/../" />    	

    <property name="opencms.output.classes"             location="${opencms.output}/build/classes-core" />
    <property name="opencms.output.jars"                location="${opencms.output}/build/jars-core" />
    <property name="opencms.output.warfiles"            location="${opencms.output}/build/${app.name}" />
    <property name="opencms.output.distfiles"           location="${opencms.output}/zip" />    

    <property name="opencms.input.warfiles"            	location="${opencms.input}/webapp" />
    <property name="opencms.input.libs" 				location="${opencms.input.warfiles}/WEB-INF/lib" />
    <property name="opencms.input.externlibs" 			location="${opencms.output}/lib" />
        
    <property name="opencms.inputlib.servlet"     		location="${opencms.input.libs}/servlet.jar" />
    <property name="opencms.inputlib.activation"  		location="${opencms.input.libs}/activation.jar" />
    <property name="opencms.inputlib.mail"        		location="${opencms.input.libs}/mail.jar" />
    <property name="opencms.inputlib.xerces"      		location="${opencms.input.libs}/xerces-1_4_4.jar" />
    <property name="opencms.inputlib.mysql"       		location="${opencms.input.libs}/mysql-connector-java-3.0.7-stable-bin.jar" />
    <property name="opencms.inputlib.oro"         		location="${opencms.input.libs}/jakarta-oro-2_0_6.jar" />
    <property name="opencms.inputlib.tidy"        		location="${opencms.input.libs}/tidy.jar" />
    <property name="opencms.inputlib.uuid"        		location="${opencms.input.libs}/jug.jar" />
    <property name="opencms.inputlib.dbcp"        		location="${opencms.input.libs}/commons-dbcp.jar" />
    <property name="opencms.inputlib.pool"        		location="${opencms.input.libs}/commons-pool.jar" />    
    <property name="opencms.inputlib.logging"     		location="${opencms.input.libs}/commons-logging.jar" /> 
    <property name="opencms.inputlib.oracle"      		location="${opencms.input.externlibs}/ojdbc14.jar" /> 
 
	<property name="drivers.vfs"						value="db" />
	<property name="drivers.project"					value="db" />
	<property name="drivers.user"						value="db" />
	<property name="drivers.workflow"					value="db" />
	<property name="drivers.backup"						value="db" />

    <property name="excludes"                   		value="**/CVS/*,**/.nbattrs,**/.project,**/.classpath" />
    
    <property environment="env" />

    <target name="init" 
    	description="Checks if all required libraries are available">
    	
        <condition property="libsAvailable">
            <and>
                <available file="${opencms.inputlib.servlet}"/>
                <available file="${opencms.inputlib.activation}"/>
                <available file="${opencms.inputlib.mail}"/>
                <available file="${opencms.inputlib.xerces}"/>
                <available file="${opencms.inputlib.mysql}"/>
                <available file="${opencms.inputlib.oro}"/>
                <available file="${opencms.inputlib.tidy}"/>
                <available file="${opencms.inputlib.uuid}"/>                
                <available file="${opencms.inputlib.pool}"/> 
                <available file="${opencms.inputlib.logging}"/> 
                <available file="${opencms.inputlib.dbcp}"/> 
            </and>
        </condition>

        <condition property="build.excludes" value="org/opencms/db/oracle/**">
            <not>
            	<available file="${opencms.inputlib.oracle}"/>
            </not>
        </condition>           
        
        <condition property="build.excludes" value="">
            <or>
            	<available file="${opencms.inputlib.oracle}"/>
           	</or>
        </condition> 
        
        <condition property="tomcat.home" value="${env.TOMCAT_HOME}">
            <available file="${env.TOMCAT_HOME}" type="dir"/>
        </condition>

        <condition property="tomcat.home" value="${env.CATALINA_HOME}">
            <available file="${env.CATALINA_HOME}" type="dir"/>
        </condition>
    
        <tstamp>
            <format property="timestamp" pattern="yyyy.MM.dd-HH.mm"/>
        </tstamp>
        <property name="version.number" value="${env.USERNAME}_${timestamp}"/>
        
        <echo message="Building OpenCms ${version.number} (${version.name})" />
        <echo message=" " />
        <echo message="OpenCms input directory is: ${opencms.input}" />
        <echo message="OpenCms output directory is: ${opencms.output}" />
        <echo message="Java version detected: ${ant.java.version}"/>
        <echo message="Tomcat home is: ${tomcat.home}" />        
        <echo message="Excluding from build: ${build.excludes}" />
    </target>
    
    
    <target name="checklibs" 
    	depends="init" unless="libsAvailable" description="Stop target if libraries required for compilation are missing">
    	
        <fail>
        
Error: Some of the required libraries are not available.

To comile OpenCms, you need the following libaries:
${opencms.inputlib.servlet}
${opencms.inputlib.activation}
${opencms.inputlib.mail}
${opencms.inputlib.xerces}
${opencms.inputlib.mysql}
${opencms.inputlib.oro}
${opencms.inputlib.tidy}
${opencms.inputlib.uuid}
${opencms.inputlib.pool}
${opencms.inputlib.logging}
${opencms.inputlib.dbcp}

        </fail>
    </target>


    <target name="clean" 
    	description="Delete existing ouput directories">
    	
        <delete dir="${opencms.output.classes}" />
        <delete dir="${opencms.output.jars}" />
        <delete dir="${opencms.output.warfiles}" />
        <delete dir="${opencms.output}/build" />
    </target>
    
    		
    <target name="compile" 
    	depends="checklibs" if="libsAvailable" description="Compile the OpenCms classes">
    	
        <mkdir dir="${opencms.output.classes}" />    	
    	
        <uptodate property="classesUpToDate" targetfile="${opencms.output.jars}/opencms.jar">
        	<srcfiles dir= "${opencms.input}/src" includes="**/*.java" excludes="${build.excludes},${excludes}"/>
        	<srcfiles dir= "${opencms.input}/src" includes="**/*.properties,**/*.txt" excludes="${excludes}" />
        </uptodate>
            	
       	<javac
            srcdir="${opencms.input}/src"
            destdir="${opencms.output.classes}"
            excludes="${build.excludes}"
            classpath="${opencms.inputlib.servlet}:
                       ${opencms.inputlib.activation}:
                       ${opencms.inputlib.mail}:
                       ${opencms.inputlib.xerces}:
                       ${opencms.inputlib.oracle}:
                       ${opencms.inputlib.oracle9}:
                       ${opencms.inputlib.mysql}:
                       ${opencms.inputlib.oro}:
                       ${opencms.inputlib.tidy}:
                       ${opencms.inputlib.dbcp}:
                       ${opencms.inputlib.pool}:
                       ${opencms.inputlib.logging}:
                       ${opencms.inputlib.uuid}"
            debug="on"
            optimize="on"
            deprecation="on" />
		
        <copy todir="${opencms.output.classes}">
            <fileset dir="${opencms.input}/src" includes="**/*.properties,**/*.txt" excludes="${excludes}"/>
        </copy>              
                
        <antcall target="versioninfo" />        
    </target>

    
    <target name="versioninfo" 
    	unless="classesUpToDate" description="Generate version information files">

        <echo file="${opencms.output.classes}/com/opencms/core/version.properties">
version.number=${version.number}
version.name=${version.name}
		</echo>

       	<echo file="${opencms.output.classes}/version.js">var version = '${version.number} ${version.name}';
		</echo>

		<copy 
			file="${opencms.input.warfiles}/setup/versions.txt" 
			todir="${opencms.output.classes}" overwrite="true">			
    		<filterset>
      			<filter token="OPENCMS_VERSION" value="OpenCms ${version.number}"/>
    		</filterset>			
		</copy>
       	
	   	<copy 
	   		file="${opencms.input.warfiles}/WEB-INF/config/opencms.properties" 
	   		todir="${opencms.output.classes}" overwrite="true">	   		
    		<filterset>
      			<filter token="DRIVERS_VFS" value="${drivers.vfs}"/>
      			<filter token="DRIVERS_PROJECT" value="${drivers.project}"/>
      			<filter token="DRIVERS_USER" value="${drivers.user}"/>
      			<filter token="DRIVERS_WORKFLOW" value="${drivers.workflow}"/>
      			<filter token="DRIVERS_BACKUP" value="${drivers.backup}"/>
    		</filterset>	   		
	   	</copy>       	  
    </target>
    		    
    		    
    <target name="jar" 
    	depends="compile" description="Generate the OpenCms .jar files">
    	
        <mkdir dir="${opencms.output.jars}" />
            	
        <jar
            jarfile="${opencms.output.jars}/opencms.jar"
            basedir="${opencms.output.classes}"
            includes="org/opencms/**,com/opencms/**,source/**"
            excludes="com/opencms/build/**" >            
            <metainf dir="${opencms.input.warfiles}/WEB-INF" includes="opencms.tld"/>
        </jar>        	            
    </target>
    

    <target name="war" 
    	depends="jar" description="Builds the opencms.war">
        
        <war 
        	destfile="${opencms.output}/build/${app.name}.war" 
        	webxml="${opencms.input.warfiles}/WEB-INF/web.xml"
        	manifest="${opencms.input.warfiles}/META-INF/MANIFEST.MF">
        	     		
       		<lib dir="${opencms.output.jars}">
       			<include name="*.jar" />
       		</lib>
       		<lib dir="${opencms.input.libs}">
       			<exclude name="servlet.jar" />
       			<exclude name="junit.jar" />
       			<exclude name="${libexcludes1}" />
       			<exclude name="${libexcludes2}" />
       			<exclude name="${libexcludes3}" />
       			<exclude name="${excludes}" />       			
       		</lib>     		
       		<fileset dir="${opencms.input.warfiles}">       		
       			<exclude name="WEB-INF/web.xml" />
       			<exclude name="WEB-INF/lib/*" />
       			<exclude name="WEB-INF/config/opencms.properties" />
       			<exclude name="WEB-INF/setupdata/vfs/system/login/version.js" />
       			<exclude name="setup/versions.txt" />
       			<exclude name="build.xml,.*,${excludes}" />
       		</fileset>
  			<zipfileset dir="${opencms.output.classes}" prefix="WEB-INF/config" includes="opencms.properties" />
  			<zipfileset dir="${opencms.output.classes}" prefix="WEB-INF/setupdata/vfs/system/login" includes="version.js" />
  			<zipfileset dir="${opencms.output.classes}" prefix="setup" includes="versions.txt" />
        </war>        
    </target>
    

    <target name="tomcat.copy" 
    	description="Copy updated files to Tomcat directorys">

       	<copy todir="${tomcat.home}/webapps/${app.name}/WEB-INF/lib">
            <fileset dir="${opencms.input.libs}">
                <include name="**/*.jar"/>
                <include name="**/*.zip"/>
            </fileset>
        </copy>    	
        <copy todir="${tomcat.home}/webapps/${app.name}/WEB-INF/lib">
            <fileset dir="${opencms.output.jars}">
                <include name="*.jar"/>
                <include name="*.zip"/>
                <exclude name="servlet.jar"/>
                <exclude name="${excludes}" />
            </fileset>
        </copy>     
        <copy file="webapp/WEB-INF/web.xml" todir="${tomcat.home}/webapps/${app.name}/WEB-INF"/>
        <copy file="webapp/WEB-INF/opencms.tld" todir="${tomcat.home}/webapps/${app.name}/WEB-INF"/>       
    </target>     
    
    
    <target name="tomcat.update" 
    	depends="jar, tomcat.copy" description="Recompile changed classes and install in Tomcat webapps directory"/>      


    <target name="tomcat.all" 
    	depends="clean, tomcat.update" description="Do a complete recompile of all classes and install in Tomcat webapps directory"/>              
    
    
    <target name="bindist" 
    	depends="clean, war" description="Creates a binary distribution ZIP">
    	
        <mkdir dir="${opencms.output.distfiles}" />                    
    	
        <zip destfile="${opencms.output.distfiles}/opencms_${version.number}.zip">
            <zipfileset dir="${opencms.output}/build" includes="${app.name}.war"/>
            <zipfileset dir="${opencms.input}" includes="install.html,license.txt,history.txt"/>
        </zip>

    </target>
        
    
    <target name="srcdist" 
    	description="Creates a source distribution ZIP">
    	
        <tstamp>
            <format property="timestamp" pattern="yyyy-MM-dd-HH-mm"/>
        </tstamp>
        <property name="version.number" value="${env.USERNAME}_${timestamp}_current"/>
        
        <echo message="Building OpenCms ${version.number} (${version.name})  source distribution " />
        <echo message=" " />
        <echo message="OpenCms input directory is: ${opencms.input}" />
        <echo message="OpenCms output directory is: ${opencms.output}" />
		
        <mkdir dir="${opencms.output.distfiles}" />                    
		
        <zip destfile="${opencms.output.distfiles}/opencms_src_${version.number}.zip">
        	<zipfileset dir="${opencms.input}/src" excludes="${excludes}" prefix="src" />
            <zipfileset dir="${opencms.input}/test" excludes="${excludes}" prefix="test" />
            <zipfileset dir="${opencms.input.warfiles}" excludes="${excludes}" prefix="webapp" />
            <zipfileset dir="${opencms.input}" includes="build.xml,install.html,license.txt,history.txt"/>
        </zip>
    </target>

</project>