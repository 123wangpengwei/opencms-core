C_COMMIT=commit
C_ROLLBACK=rollback
C_TRIMBLOB={call dbms_lob.trim(?,?)}
# oracle PL/SQL specific statement.
# statements for resources
C_PLSQL_RESOURCES_LOCKRESOURCE={call opencmsResource.lockResource(?,?,?,?,?)}
C_PLSQL_RESOURCES_UNLOCKRESOURCE={call opencmsResource.unlockResource(?,?,?,?)}
C_PLSQL_RESOURCES_READFOLDER={? = call opencmsResource.readFolder(?,?,?)}
C_PLSQL_RESOURCES_READFILEHEADER={? = call opencmsResource.readFileHeader(?,?,?)}
# read the file without checking accessRead
C_PLSQL_RESOURCES_READFILE={? = call opencmsResource.readFile(?,?,?,?)}
# read the file with checking accessRead
C_PLSQL_RESOURCES_READFILEACC={? = call opencmsResource.readFile(?,?,?)}
C_PLSQL_RESOURCES_WRITEFILEHEADER={? = call opencmsResource.writeFileHeader(?,?,?)}
C_PLSQL_RESOURCES_COPYFILE={call opencmsResource.copyFile(?,?,?,?)}
# statements for resources of a published project
C_PLSQL_RESOURCES_REMOVEALLDELETED=delete from cms_resources \
                                   where resource_name in \
                                   (select r.resource_name from cms_resources r, cms_projectresources p \
                                   where r.resource_name like concat(p.resource_name,'%') \
                                   and p.project_id = ?  and r.state = ?  and r.project_id = p.project_id)
C_PLSQL_RESOURCES_SETALLUNCHANGED=update cms_resources set state = ?  \
                                  where resource_name in \
                                  (select r.resource_name from cms_resources r, cms_projectresources p \
                                   where r.resource_name like concat(p.resource_name,'%') \
                                   and p.project_id = ? and r.state != ? and r.project_id = p.project_id)
# statements for projects
C_PLSQL_PROJECTS_GETALLACCESS={? = call opencmsProject.getAllAccessibleProjects(?)}
C_PLSQL_PROJECTS_COPYRESOURCETOPROJECT={call opencmsProject.copyResourceToProject(?,?,?)}
C_PLSQL_PROJECTS_PUBLISHPROJECT={call opencmsProject.publishProject(?,?,?,?,?,?,?,?,?)}
# statements for access
C_PLSQL_ACCESS_ACCESSCREATE={? = call opencmsAccess.accessCreate(?,?,?)}
C_PLSQL_ACCESS_ACCESSPROJECT={? = call opencmsAccess.accessProject(?,?)}
C_PLSQL_ACCESS_ACCESSREAD={? = call opencmsAccess.accessRead(?,?,?)}
C_PLSQL_ACCESS_ACCESSWRITE={? = call opencmsAccess.accessWrite(?,?,?)}
C_PLSQL_ACCESS_ACCESSLOCK={? = call opencmsAccess.accessLock(?,?,?)}
# statements for groups
C_PLSQL_GROUPS_USERINGROUP={? = call opencmsGroup.userInGroup(?,?)}
C_PLSQL_GROUPS_GETGROUPSOFUSER={? = call opencmsGroup.getGroupsOfUser(?)}
C_PLSQL_GROUPS_ISMANAGEROFPROJECT={? = call opencmsGroup.isManagerOfProject(?,?)}
C_PLSQL_GROUPS_GETUSERSOFGROUP={? = call opencmsGroup.getUsersOfGroup(?,?,?)}
# statements for files
C_PLSQL_FILESFORUPDATE=select file_content from cms_files where file_id = ? for update nowait
C_PLSQL_FILESFORUPDATE_ONLINE=select file_content from cms_online_files \
                              where file_id = ?  for update nowait
C_PLSQL_FILESFORINSERT=insert into cms_files (file_id, file_content) values (?, empty_blob())
C_PLSQL_FILESFORINSERT_ONLINE=insert into cms_online_files (file_id, file_content) \
                              values (?, empty_blob())
# statements for users
C_PLSQL_USERSWRITE=update cms_users set user_description = ?, USER_FIRSTNAME = ?, \
                   USER_LASTNAME = ?, USER_EMAIL = ?, USER_LASTLOGIN = ?, USER_LASTUSED = ?, \
                   USER_FLAGS = ?, USER_DEFAULT_GROUP_ID = ?, USER_ADDRESS = ?, USER_SECTION = ?, \
                   USER_TYPE = ? WHERE USER_ID = ?
C_PLSQL_USERSFORUPDATE=select user_info from cms_users where user_id = ? for update nowait
C_PLSQL_USERSFORINSERT=insert into cms_users (USER_ID, USER_NAME, USER_PASSWORD, \
                       USER_RECOVERY_PASSWORD, USER_DESCRIPTION, USER_FIRSTNAME, USER_LASTNAME, \
                       USER_EMAIL, USER_LASTLOGIN, USER_LASTUSED, USER_FLAGS, USER_INFO, \
                       USER_DEFAULT_GROUP_ID, USER_ADDRESS, USER_SECTION, USER_TYPE) \
                       values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, empty_blob(), ?, ?, ?, ?)
# statements for systemproperties
C_PLSQL_SYSTEMPROPERTIES_FORINSERT=INSERT INTO CMS_SYSTEMPROPERTIES \
                                   (SYSTEMPROPERTY_ID, SYSTEMPROPERTY_NAME, SYSTEMPROPERTY_VALUE) \
                                   VALUES(?, ?, empty_blob())
C_PLSQL_SYSTEMPROPERTIES_FORUPDATE=select systemproperty_value from cms_systemproperties \
                                   where systemproperty_id = ? for update nowait
C_PLSQL_SYSTEMPROPERTIES_NAMEFORUPDATE=select systemproperty_value from cms_systemproperties \
                                       where systemproperty_name = ? for update nowait
# statements for sessions
C_PLSQL_SESSION_FORINSERT=INSERT into CMS_SESSIONS (SESSION_ID, SESSION_LASTUSED, SESSION_DATA) \
                          values (?, ?, empty_blob())
C_PLSQL_SESSION_FORUPDATE=select SESSION_DATA from CMS_SESSIONS \
                          where SESSION_ID = ? for update nowait
C_PLSQL_SESSION_UPDATE=UPDATE CMS_SESSIONS set SESSION_LASTUSED = ? where SESSION_ID = ?
