/*
 * File   : $Source: /alkacon/cvs/opencms/src/org/opencms/widgets/Attic/CmsAdvancedGalleryWidgetConfiguration.java,v $
 * Date   : $Date: 2009/11/24 11:37:55 $
 * Version: $Revision: 1.1 $
 *
 * This library is part of OpenCms -
 * the Open Source Content Management System
 *
 * Copyright (C) 2002 - 2009 Alkacon Software (http://www.alkacon.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * For further information about Alkacon Software, please see the
 * company website: http://www.alkacon.com
 *
 * For further information about OpenCms, please see the
 * project website: http://www.opencms.org
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package org.opencms.widgets;

import org.opencms.file.CmsObject;
import org.opencms.json.JSONArray;
import org.opencms.json.JSONException;
import org.opencms.json.JSONObject;
import org.opencms.main.CmsLog;
import org.opencms.util.CmsMacroResolver;
import org.opencms.util.CmsStringUtil;

import org.apache.commons.logging.Log;

/**
 * Configuration options for the advanced gallery widget (e.g. AdvancedGalleryWidget).<p>
 * 
 * The configuration options are read from the configuration String of the widget. 
 * For nested XML schemas the configuration String must be defined inside the nested content.<p>
 * 
 * The configuration String has to be formatted as JSON object, with the following possible keys:<p>
 * <ul>
 * <li><code>class</code>: optional class implementing {@link I_CmsGalleryWidgetDynamicConfiguration} to dynamically
 *            configure startup parameters and format values.</li>
 * <li><code>startfolders</code>: the startup folder, can be dynamically generated by the provided class,
 *            in that case, use 'dynamic' as value.</li>
 * <li><code>type</code>: the startup folder type, can be 'gallery' or 'category'. Can be dynamically generated
 *            by the provided class, in that case, use 'dynamic' as value.</li>
 * <li><code>resourcetypes</code>: the resource types, which are available for this advanced gallery as Json array.</li>
 * </ul>
 * 
 * Example configurations can look like this:<p>
 * <code>{type: 'gallery', startup: '/demo_en/images/',resourcetypes:[image]}</code><p>
 * <code>{type: 'category', startup: 'wurstsorten/kochwurst/'}</code><p>
 *
 * @author Polina Smagina
 * 
 * @version $Revision: 1.1 $ 
 * 
 * @since 7.5.0 
 */
public class CmsAdvancedGalleryWidgetConfiguration extends CmsGalleryWidgetConfiguration {

    /** Configuration key name for the configuration of the resource types. */
    public static final String CONFIG_KEY_RESOURCETYPES = "resourcetypes";

    /** The resource types to be load in this advanced gallery widget. */
    private JSONArray m_resourceTypes;

    /** The initial loaded folders. */
    private JSONArray m_startUpFolders;

    /** The log object for this class. */
    private static final Log LOG = CmsLog.getLog(CmsAdvancedGalleryWidgetConfiguration.class);

    /**
     * Generates an initialized configuration for the advanced gallery item widget using the given configuration string.<p>
     * 
     * @param cms an initialized instance of a CmsObject
     * @param widgetDialog the dialog where the widget is used on
     * @param param the widget parameter to generate the widget for
     * @param configuration the widget configuration string
     */
    public CmsAdvancedGalleryWidgetConfiguration(
        CmsObject cms,
        I_CmsWidgetDialog widgetDialog,
        I_CmsWidgetParameter param,
        String configuration) {

        super();
        init(cms, widgetDialog, param, configuration);

    }

    /**
     * Initializes the widget configuration using the given configuration string.<p>
     * 
     * @param cms an initialized instance of a CmsObject
     * @param widgetDialog the dialog where the widget is used on
     * @param param the widget parameter to generate the widget for
     * @param configuration the widget configuration string
     */
    protected void init(CmsObject cms, I_CmsWidgetDialog widgetDialog, I_CmsWidgetParameter param, String configuration) {

        if (configuration == null) {
            // no configuration String found, return
            return;
        }
        configuration = CmsMacroResolver.resolveMacros(configuration, cms, widgetDialog.getMessages());
        JSONObject jsonObj = new JSONObject();
        try {
            jsonObj = new JSONObject(configuration);
        } catch (JSONException e) {
            // initialization failed
            return;
        }
        // determine the class name that fills in values dynamically
        setClassName(jsonObj.optString(CONFIG_KEY_CLASS, null));
        I_CmsGalleryWidgetDynamicConfiguration dynConf = null;
        if (getClassName() != null) {
            try {
                dynConf = (I_CmsGalleryWidgetDynamicConfiguration)Class.forName(getClassName()).newInstance();
            } catch (Exception e) {
                // class not found
            }
        }
        // determine the initial item list settings
        setType(jsonObj.optString(CONFIG_KEY_TYPE));
        if ((CONFIG_VALUE_DYNAMIC.equals(getType()) || CmsStringUtil.isEmpty(getType())) && (dynConf != null)) {
            setType(dynConf.getType(cms, widgetDialog, param));
        }
        String startUp = jsonObj.optString(CONFIG_KEY_STARTUP);
        LOG.debug(startUp);
        if (startUp.startsWith("[") && startUp.endsWith("]")) {
            setStartUpFolders(jsonObj.optJSONArray(CONFIG_KEY_STARTUP));
            LOG.debug(jsonObj.optJSONArray(CONFIG_KEY_STARTUP).toString());
        } else {
            setStartup(startUp);
        }
        if ((CONFIG_VALUE_DYNAMIC.equals(getStartup()) || CmsStringUtil.isEmpty(getStartup())) && (dynConf != null)) {
            setStartup(dynConf.getStartup(cms, widgetDialog, param));
        }
        // determine the resource types available for this advanced gallery
        setResourceTypes(jsonObj.optJSONArray(CONFIG_KEY_RESOURCETYPES));

    }

    /**
     * Returns the startUpFolders.<p>
     *
     * @return the startUpFolders
     */
    public JSONArray getStartUpFolders() {

        return m_startUpFolders;
    }

    /**
     * Sets the startUpFolders.<p>
     *
     * @param startUpFolders the startUpFolders to set
     */
    public void setStartUpFolders(JSONArray startUpFolders) {

        m_startUpFolders = startUpFolders;
    }

    /**
     * Returns the resourceTypes.<p>
     *
     * @return the resourceTypes
     */
    public JSONArray getResourceTypes() {

        return m_resourceTypes;
    }

    /**
     * Sets the resourceTypes.<p>
     *
     * @param array the resourceTypes to set
     */
    public void setResourceTypes(JSONArray array) {

        m_resourceTypes = array;
    }

}
