<!-- 
# The root configuration node is called <opencms> for all OpenCms configurations.
-->
<!ELEMENT opencms (workplace)>

<!--
# <workplace> configuration:
#
# The workplace configuration contains options required for the "back office" 
# part of OpenCms.
-->
<!ELEMENT workplace (
	defaultlocale,
	dialoghandlers, 
	editorhandler, 
	editoraction, 
	views,
	exportpoints, 
	autolock?, 
	enableusermanagement?, 
	maxfileuploadsize?, 
	labeledfolders?,
	explorertypes+ )>

<!--
# The default locale of the OpenCms workplace that is selected if a user
# log into the workplace for the first time, of if his current selection 
# is invalid. User can change this setting individually with the preference dialog.
-->
<!ELEMENT defaultlocale (#PCDATA)>

<!--
# The worklace dialog handlers allow extending / changing the default
# Workplace dialogs with another, customized implementation.
# For example, if your application requires a lot of special properties,
# you can implement your own property dialog handler that contains only
# the properties required by your application in a more user friendly form.
-->
<!ELEMENT dialoghandlers (dialoghandler+)>
<!ELEMENT dialoghandler EMPTY>
<!ATTLIST dialoghandler class CDATA #REQUIRED>

<!--
# Using editor handler and editor action classes you can
# modify the behaviour of the "edit" action in the OpenCms Workplace.
-->
<!ELEMENT editorhandler EMPTY>
<!ATTLIST editorhandler class CDATA #REQUIRED>

<!ELEMENT editoraction EMPTY>
<!ATTLIST editoraction class CDATA #REQUIRED>

<!--
# The Workplace views are displayed in the top frame of the workplace.
# Each view is a link to a certain resource in the OpenCms VFS.
# Usually this resource is a JSP or some other template that creates
# a user interface with special options.
-->
<!ELEMENT views (view+)>
<!ELEMENT view EMPTY>
<!ATTLIST view key CDATA #REQUIRED uri CDATA #REQUIRED order CDATA #REQUIRED>

<!--
# An export point is a folder inside the OpenCms VFS that is copied 1:1 to a 
# location in the real file system during publishing. This is for example used to 
# copy Java classes, JAR files or other system resouces from the VFS to the WEB-INF/classes or 
# WEB-INF/lib folder. No link processing is done for resources written with export points. 
-->
<!ELEMENT exportpoints (exportpoint+)>
<!ELEMENT exportpoint EMPTY>
<!ATTLIST exportpoint uri CDATA #REQUIRED destination CDATA #REQUIRED>

<!--
# Enables or disables the automatic locking of resources in the explorer view.
# If this is set to "true" (the default) edit operations can be performed
# on a resource that is unlocked, and the resource will be automatically locked
# for the user that performs the operation. If set to "false", an explicit
# locking of the resource is required.
-->
<!ELEMENT autolock (#PCDATA)>

<!--
# Enables or disables the icons for editing users and groups 
# in the user management view. Set this to "false" if you
# administrate groups and users with an external tool.
# The default is "true".
-->
<!ELEMENT enableusermanagement (#PCDATA)>

<!--
# Limits the size of the files which can be uploaded
# by users to the VFS. Limitation does not apply for members
# of the Administrators group.
# The value is the maximum file size in kilobytes.
# Disable the limitation by setting the value to -1, 
# or leaving this node empty.
-->
<!ELEMENT maxfileuploadsize (#PCDATA)>

<!--
# List of labeled folders. If a resource has a sibling in one of these folders,
# a special label icon will be shown in the explorer view on all siblings.
# Use this feature to identify "dangerous" folders (e.g. folders that 
# contain material that will be public available after publishing) 
# to prevent accidental creation of siblings in this folder to a resource that 
# contains sensitive data.
-->
<!ELEMENT labeledfolders (resource*)>
<!ELEMENT resource EMPTY>
<!ATTLIST resource uri CDATA #REQUIRED>

<!--
# Settings for the new resource dialog and the contextmenus in the explorer view.
# Configure which options are shown in the new resource dialog and if resources are 
# visible and editable depending on the current users group(s).
-->
<!ELEMENT explorertypes (explorertype+)>

<!--
# The resource type name, the key of the localized name and the used icon are required.
-->
<!ELEMENT explorertype (
	newresource,
	accesscontrol,
	editoptions?)>
<!ATTLIST explorertype name CDATA #REQUIRED key CDATA #REQUIRED icon CDATA #REQUIRED>

<!--
# The URI for the new resource dialog and the ranking is required.
-->
<!ELEMENT newresource EMPTY>
<!ATTLIST newresource uri CDATA #REQUIRED order CDATA #REQUIRED>

<!--
# Enter the permissions for OpenCms groups. The flags have the following meaning:
# +w: the context menu for editing the resource is shown
# +c: this entry is shown in the new resource dialog for this group
# +v: resources of the current type are visible in the explorer view
-->
<!ELEMENT accesscontrol (accessentry*)>
<!ELEMENT accessentry EMPTY>
<!ATTLIST accessentry principal CDATA #REQUIRED permissions CDATA #REQUIRED>

<!--
# The edit options of the current explorer type. 
# Don't specify them for the file upload and new link types.
-->
<!ELEMENT editoptions (
	defaultproperties,
	contextmenu)>

<!--
# Define here the properties which can be edited in the new resource dialog.
# If the enabled attribute is false, the special property dialog will not be used.
# If the shownavigation attribute is true, navigation properties can be editied in the special property dialog.
-->
<!ELEMENT defaultproperties (property*)>
<!ATTLIST defaultproperties 
    enabled (true|false|TRUE|FALSE) #REQUIRED
	shownavigation (true|false|TRUE|FALSE) #IMPLIED>

<!--
# This defines the context menu appearance of the current explorer type.
# A list of entry and separator nodes is needed here.
# An entry node needs the following attributes:
# key: the name for the localized key of the menu entry.
# uri: the OpenCms VFS URI of the dialog.
#
# rules:	The display rules for the current menu entry. 
#			The rule characters have been separated by spaces for better readability.
#
#			Example: "d d iiii aaai dddd"
#					  1 2    3    4    5 
# 
# 			Each rule is separated into 5 blocks (see above).
#           A block describes a resource condition in the context 
#           of the current user:
#
#			1: Appearance in the "Online" project
#			2: Appearance if the resource is not part of the current offline project
#			3: Appearance if the resource is unlocked
#			4: Appearance if the resource is exclusively locked by the current user in the current project	
#			5: Appearance for all other lock states (locked by other user, locked in other project, shared lock, etc.)
#
#			The meaning of the parameter characters is: 
#           d = deactivated (invisible), i = inactive, a = active
#
#           Blocks 1 and 2 require only one parameter since a resource 
#           does not have a state if it is not part of the current project.
#
#           Blocks 3, 4 and 5 require four parameters. The parameters control the appearance
#           of the context menu entry if the resource is in one of the 4 possible states:
#			1 = unchanged, 2 = changed, 3 = new, 4 = deleted
#           This is e.g. required to show the "undelete" option on the 
#           menu only if the resource is deleted. 
#
# order: the order of the entry (display position in the menu).
# isxml: optional, if the URI leads to a legacy XMLTemplate based dialog, set this attribute to true.
# A separator node only needs the order attribute to be displayed properly.
-->
<!ELEMENT contextmenu (
	entry*,
	separator*)*>
	
<!ELEMENT entry EMPTY>
<!ATTLIST entry 
	key CDATA #REQUIRED 
	uri CDATA #REQUIRED 
	rules CDATA #REQUIRED 
	order CDATA #REQUIRED 
	target CDATA #IMPLIED
	isxml (true|false|TRUE|FALSE) #IMPLIED>
	
<!ELEMENT separator EMPTY>
<!ATTLIST separator order CDATA #REQUIRED>

<!--
# <importexport> node options.
# In this node the import and export options are configured.
# If you are installing a fresh OpenCms system without migrating
# content from old OpenCms versions, you usually do not need any special 
# configuration. 
-->
<!ELEMENT importexport (
	importexporthandlers, 
	import )>

<!--
# List of import / export handlers.
# When content is imported, the manifest.xml is analyzed and the 
# appropriate handler for the import format is selected. 
-->
<!ELEMENT importexporthandlers (importexporthandler+)>
<!ELEMENT importexporthandler EMPTY>
<!ATTLIST importexporthandler class CDATA #REQUIRED>

<!-- 
# <import> node options.
# There are several options to ensure backward compatibility.
-->
<!ELEMENT import (overwrite?, convert?, oldwebappurl?, importversions+, immutables*, principaltranslations*, ignoredproperties*)>

<!--
# If this flag is set to "false" then imports > v2 (that should have resource UUIDs
# in the manifest) will move colliding resources to /system/lost-found/. Otherwise
# colliding resources will be overwritten. v1 and v2 imports (without resource 
# UUIDs in the manifest) are forced to overwrite colliding  resources, no matter 
# how this flag is set.
-->
<!ELEMENT overwrite (#PCDATA)>

<!--
# This flag controls if editabled content of older versions is automatically
# conterted to the current version upon import. For example, content of type 
# "page" from 5.0 is converted into "xmlpage" in 6.0.
-->
<!ELEMENT convert (#PCDATA)>

<!--
# Convert file content from 4.x to 5.x style during import
# This is needed for the correct content conversion of the import.
# Enter the URL of the OpenCms web application from which the content was exported,
# e.g. http://localhost:8080/opencms/opencms/ for a standard local Tomcat installation.
-->
<!ELEMENT oldwebappurl (#PCDATA)>

<!--
# List of import class names. 
# This is only required if you must import OpenCms content created with older OpenCms 
# versions. The format of the export has changed with new 
# OpenCms versions being released. Each export file has a "stamp" in the 
# manifest.xml that signals which export version of OpenCms was used.
# In order to import resources from older installations, you must enabled
# the corrospondig classes in this configuration node.
-->
<!ELEMENT importversions (importversion+)>
<!ELEMENT importversion EMPTY>
<!ATTLIST importversion class CDATA #REQUIRED>

<!--
# Import immutable resources:
# Certain system resources should usually not be changed and be "immutable" 
# during an import. This is especially true for the main folders in the /system/ 
# directory as locking and changing these will take very long during the import.
# Changes to these folders usually happen only accidentally and so should not be imported
# to another system.
-->
<!ELEMENT immutables (resource*)>

<!--
# Import principal (ie. user/group) name translation:
# In case the user names in the import differ from the user names configured 
# in the importing system, you can use this feature to translate the names from the 
# import to other names in your system.
-->
<!ELEMENT principaltranslations (principaltranslation*)>
<!ELEMENT principaltranslation EMPTY>
<!ATTLIST principaltranslation type (USER|user|GROUP|group) #REQUIRED from CDATA #REQUIRED to CDATA #REQUIRED>

<!--
# List of properties which are ignored (ie. not imported) when resources are imported. 
-->
<!ELEMENT ignoredproperties (property*)>
<!ELEMENT property EMPTY>
<!ATTLIST property name CDATA #REQUIRED>
