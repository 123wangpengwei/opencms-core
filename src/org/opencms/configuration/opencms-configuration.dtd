<!-- 
# The root configuration node is called "opencms".
-->
<!ELEMENT opencms (configuration, tests?, vfs, workplace, importexport)>

<!--
# <configuration> node options.
-->

<!ELEMENT configuration (config+)>
<!ELEMENT config EMPTY>
<!ATTLIST config class CDATA #REQUIRED>

<!-- 
# Parameters can be passed to various configuration objects.
-->

<!ELEMENT param (#PCDATA)>
<!ATTLIST param name CDATA #REQUIRED>

<!-- 
# Test node configuration.
-->

<!ELEMENT tests (test*)>
<!ELEMENT test (#PCDATA)>
<!ATTLIST test name CDATA #REQUIRED>

<!--
# <vfs> node options.
-->

<!ELEMENT vfs (
	resourceloaders, 
	resourcetypes,
	translations? )>

<!ELEMENT resourceloaders (loader+)>
<!ELEMENT loader (param*)>
<!ATTLIST loader class CDATA #REQUIRED>

<!ELEMENT resourcetypes (type+)>
<!ELEMENT type (param*)>
<!ATTLIST type class CDATA #REQUIRED>

<!ELEMENT translations (filetranslations?, foldertranslations?)>

<!ELEMENT translation (#PCDATA)>

<!--
# Filename translation is used when creating new files to automatically 
# replace chars not allowed in the OpenCms VFS into allowed ones.
# This is done using Perl5 regular search & replace expression translation rules.
# One of the most important uses is e.g. replacement of space with "_".
# So if a user uploads a file "my file.txt" the name will be translated to "my_file.txt".
# All of the translation rules are applied to the filename in the given order.
#
# By setting the "enabled" attibute to "false" you can disable filename translation.
# It is enabled by default. It's recommended to leave this enabled.
#
# Filename translation is only applied to: 
#   - File uploads (the name of the uploaded file is translated)
#   - Zip-File uploads (all filenames in the Zip are translated)
-->

<!ELEMENT filetranslations (translation*)>
<!ATTLIST filetranslations enabled (TRUE|true|FALSE|false) #REQUIRED>

<!--
# Folder translation can be used to maintain compatibility with older
# OpenCms installations, e.g. with version before the 5.0 (beta 2) release.
# This is done using Perl5 regular search & replace expression rules.
# All read and write access to a OpenCms VFS folder that matches one of given
# translation rules is automatically translated to the new name.
# Translation is stopped after the first match was found.
#
# The attribute "enabled" controls if folder translation is enabled.
# The default is "not enabled". Use this feature only if you have specific 
# reasons because it might hurt performance.
-->

<!ELEMENT foldertranslations (translation*)>
<!ATTLIST foldertranslations enabled (TRUE|true|FALSE|false) #REQUIRED>

<!--
# <workplace node options.
-->
<!ELEMENT workplace (
	defaultlocale,
	dialoghandlers, 
	editorhandler, 
	editoraction, 
	views,
	exportpoints, 
	autolock?, 
	enableusermanagement?, 
	maxfileuploadsize?, 
	labledfolders? )>

<!--
# The default locale of the OpenCms workplace that is selected if a user
# log into the workplace for the first time, of if his current selection 
# is invalid. User can change this setting individually with the preference dialog.
-->
<!ELEMENT defaultlocale (#PCDATA)>

<!--
# The worklace dialog handlers allow extending / changing the default
# Workplace dialogs with another, customized implementation.
# For example, if your application requires a lot of special properties,
# you can implement your own property dialog handler that contains only
# the properties required by your application in a more user friendly form.
-->
<!ELEMENT dialoghandlers (dialoghandler+)>
<!ELEMENT dialoghandler EMPTY>
<!ATTLIST dialoghandler class CDATA #REQUIRED>

<!--
# Using editor handler and editor action classes you can
# modify the behaviour of the "edit" action in the OpenCms Workplace.
-->
<!ELEMENT editorhandler EMPTY>
<!ATTLIST editorhandler class CDATA #REQUIRED>

<!ELEMENT editoraction EMPTY>
<!ATTLIST editoraction class CDATA #REQUIRED>

<!--
# The Workplace views are displayed in the top frame of the workplace.
# Each view is a link to a certain resource in the OpenCms VFS.
# Usually this resource is a JSP or some other template that creates
# a user interface with special options.
-->
<!ELEMENT views (view+)>
<!ELEMENT view EMPTY>
<!ATTLIST view key CDATA #REQUIRED uri CDATA #REQUIRED order CDATA #REQUIRED>

<!--
# An export point is a folder inside the OpenCms VFS that is copied 1:1 to a 
# location in the real file system during publishing. This is for example used to 
# copy Java classes, JAR files or other system resouces from the VFS to the WEB-INF/classes or 
# WEB-INF/lib folder. No link processing is done for resources written with export points. 
-->
<!ELEMENT exportpoints (exportpoint+)>
<!ELEMENT exportpoint EMPTY>
<!ATTLIST exportpoint uri CDATA #REQUIRED destination CDATA #REQUIRED>

<!--
# Enables or disables the automatic locking of resources in the explorer view.
# If this is set to "true" (the default) edit operations can be performed
# on a resource that is unlocked, and the resource will be automatically locked
# for the user that performs the operation. If set to "false", an explicit
# locking of the resource is required.
-->
<!ELEMENT autolock (#PCDATA)>

<!--
# Enables or disables the icons for editing users and groups 
# in the user management view. Set this to "false" if you
# administrate groups and users with an external tool.
# The default is "true".
-->
<!ELEMENT enableusermanagement (#PCDATA)>

<!--
# Limits the size of the files which can be uploaded
# by users to the VFS. Limitation does not apply for members
# of the Administrators group.
# The value is the maximum file size in kilobytes.
# Disable the limitation by setting the value to -1, 
# or leaving this node empty.
-->
<!ELEMENT maxfileuploadsize (#PCDATA)>

<!--
# List of labled folders. If a resource has a sibling in one of these folders,
# a special label icon will be shown in the explorer view on all siblings.
# Use this feature to identify "dangerous" folders (e.g. folders that 
# contain material that will be public available after publishing) 
# to prevent accidental creation of siblings in this folder to a resource that 
# contains sensitive data.
-->
<!ELEMENT labledfolders (resource*)>
<!ELEMENT resource EMPTY>
<!ATTLIST resource uri CDATA #REQUIRED>

<!--
# <importexport> node options.
# In this node the import and export options are configured.
# If you are installing a fresh OpenCms system without migrating
# content from old OpenCms versions, you usually do not need any special 
# configuration. 
-->
<!ELEMENT importexport (
	importexporthandlers, 
	import )>

<!--
# List of import / export handlers.
# When content is imported, the manifest.xml is analyzed and the 
# appropriate handler for the import format is selected. 
-->
<!ELEMENT importexporthandlers (importexporthandler+)>
<!ELEMENT importexporthandler EMPTY>
<!ATTLIST importexporthandler class CDATA #REQUIRED>

<!-- 
# <import> node options.
# There are several options to ensure backward compatibility.
-->
<!ELEMENT import (overwrite?, convert?, oldwebappurl?, importversions+, immutables*, princialtranslations*, ignoredproperties*)>

<!--
# If this flag is set to "false" then imports > v2 (that should have resource UUIDs
# in the manifest) will move colliding resources to /system/lost-found/. Otherwise
# colliding resources will be overwritten. v1 and v2 imports (without resource 
# UUIDs in the manifest) are forced to overwrite colliding  resources, no matter 
# how this flag is set.
-->
<!ELEMENT overwrite (#PCDATA)>

<!--
# This flag controls if editabled content of older versions is automatically
# conterted to the current version upon import. For example, content of type 
# "page" from 5.0 is converted into "xmlpage" in 6.0.
-->
<!ELEMENT convert (#PCDATA)>

<!--
# Convert file content from 4.x to 5.x style during import
# This is needed for the correct content conversion of the import.
# Enter the URL of the OpenCms web application from which the content was exported,
# e.g. http://localhost:8080/opencms/opencms/ for a standard local Tomcat installation.
-->
<!ELEMENT oldwebappurl (#PCDATA)>

<!--
# List of import class names. 
# This is only required if you must import OpenCms content created with older OpenCms 
# versions. The format of the export has changed with new 
# OpenCms versions being released. Each export file has a "stamp" in the 
# manifest.xml that signals which export version of OpenCms was used.
# In order to import resources from older installations, you must enabled
# the corrospondig classes in this configuration node.
-->
<!ELEMENT importversions (importversion+)>
<!ELEMENT importversion EMPTY>
<!ATTLIST importversion class CDATA #REQUIRED>

<!--
# Import immutable resources:
# Certain system resources should usually not be changed and be "immutable" 
# during an import. This is especially true for the main folders in the /system/ 
# directory as locking and changing these will take very long during the import.
# Changes to these folders usually happen only accidentally and so should not be imported
# to another system.
-->
<!ELEMENT immutables (resource*)>

<!--
# Import principal (ie. user/group) name translation:
# In case the user names in the import differ from the user names configured 
# in the importing system, you can use this feature to translate the names from the 
# import to other names in your system.
-->
<!ELEMENT princialtranslations (princialtranslation*)>
<!ELEMENT princialtranslation EMPTY>
<!ATTLIST princialtranslation type (USER|user|GROUP|group) #REQUIRED from CDATA #REQUIRED to CDATA #REQUIRED>

<!--
# List of properties which are ignored (ie. not imported) when resources are imported. 
-->
<!ELEMENT ignoredproperties (property*)>
<!ELEMENT property EMPTY>
<!ATTLIST property name CDATA #REQUIRED>






<!ELEMENT localehandler EMPTY>
<!ATTLIST localehandler class CDATA #REQUIRED>

