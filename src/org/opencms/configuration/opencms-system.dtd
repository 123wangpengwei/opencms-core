<!-- 
# The root configuration node is called <opencms> for all OpenCms configurations.
-->
<!ELEMENT opencms (system)>

<!--
# <system> configuration:
#
# This node contains various core runtime options for OpenCms.
-->
<!ELEMENT system (
	internationalization,
	mail,
	scheduler,
	versionhistory,
	resourceinit?,
	requesthandlers?,
	passwordhandler,
	sites,
	runtimeproperties? )>

<!--
# Version history settings.
# The OpenCms VFS keeps a version history for old versions of files.
# This is done as a binary 1:1 copy of the original file (i.e. no "diff").
# Because of this the database would grow very large if unlimited versions
# would be stored. The version history is enabled by default. You can
# enable / disable it with the "enabled" attribute. The "count" attribute
# controls the number of binary copies that are kept in the database per individual file. 
# If a file has more versions, the oldest binary content is deleted (you can not re-create this 
# version anymore). However, the basic information about the old version (i.e. who 
# did the publish etc.) is still kept in the database.
-->
<!ELEMENT versionhistory EMPTY>
<!ATTLIST versionhistory enabled (TRUE|true|FALSE|false) #REQUIRED count CDATA #REQUIRED>

<!ELEMENT internationalization (localehandler, localesconfigured, localesdefault)>

<!ELEMENT localehandler EMPTY>
<!ATTLIST localehandler class CDATA #REQUIRED>

<!ELEMENT localesconfigured (locale+)>
<!ELEMENT localesdefault (locale+)>

<!ELEMENT locale (#PCDATA)>

<!ELEMENT mail (mailfrom, mailhost+)>
<!ELEMENT mailfrom (#PCDATA)>
<!ELEMENT mailhost EMPTY>
<!ATTLIST mailhost 
	name CDATA #REQUIRED
	order CDATA #IMPLIED
	protocol CDATA #IMPLIED
	user CDATA  #IMPLIED
	password CDATA #IMPLIED>

<!ELEMENT resourceinit (resourceinithandler*)>
<!ELEMENT resourceinithandler EMPTY>
<!ATTLIST resourceinithandler class CDATA #REQUIRED>

<!--
# Request handlers:
# Request handlers are used for special requests that should NOT be mapped to a VFS resource.
# See the JavaDoc of interface org.opencms.main.I_CmsRequestHandler for more details.
-->
<!ELEMENT requesthandlers (requesthandler*)>
<!ELEMENT requesthandler EMPTY>
<!ATTLIST requesthandler class CDATA #REQUIRED>

<!--
# Password handler:
# Provides method for password encryption and password validation.
# See the JavaDoc of interface org.opencms.security.I_CmsPasswordHandler for more details.
-->
<!ELEMENT passwordhandler (encoding, digest-type)>
<!ATTLIST passwordhandler class CDATA #REQUIRED>

<!ELEMENT digest-type (#PCDATA)>

<!--
# Scheduler settings:
# The scheduler settings provide information for the OpenCms scheduler. 
# The OpenCms scheduler is comparable with the CRON facility in Unix systems.
# 
# The scheduler has a list of <job> subnodes.
# Most important for a job is the <class> name to be executed,
# and the <cronexpression> that controls the excution time. 
-->

<!ELEMENT scheduler (job*)>

<!ELEMENT job (name?, class, reuseinstance?, cronexpression, context, parameters?)>

<!--
# The job name is optional and used for information purposes only (e.g. in the log file).
# If no job name is provided, the class name is used as the job name.
-->
<!ELEMENT name (#PCDATA)>

<!--
# The job class name to execute at the scheduled time.
# This class _must_ implement the org.opencms.scheduler.I_CmsSchedulerJob interface.
-->
<!ELEMENT class (#PCDATA)>

<!--
# Optional configuration that controls if a new instance of the job class is created 
# every time the job is run, or if an instance is created only for the first time and
# re-used for every later job execution. 
#
# The #PCDATA value will be evaluated with Boolean.valueOf(#PCDATA).booleanValue().
# If the result is "true", the class instance will be re-used.
-->
<!ELEMENT reuseinstance (#PCDATA)>

<!--
# The cron expression to use for the job schedule.
# Please refer to the JavaDoc of the class org.opencms.scheduler.CmsScheduledJob
# for a full description of the possible options.
-->
<!ELEMENT cronexpression (#PCDATA)>

<!--
# Each job will be provided with an initialized instance of a CmsObject.
# The settings in the <context> node control the request context settings of this object.
# 
# The defaults for the optional elements are:
# siteroot:   /
# requesturi: /
# locale:     the first locale configured as default locale
# encoding:   the configures system encoding
# remoteaddr: 127.0.0.1
-->
<!ELEMENT context (user, project, siteroot?, requesteduri?, locale?, encoding?, remoteaddr?)>

<!ELEMENT user (#PCDATA)>
<!ELEMENT project (#PCDATA)>
<!ELEMENT siteroot (#PCDATA)>
<!ELEMENT requesteduri (#PCDATA)>
<!ELEMENT encoding (#PCDATA)>
<!ELEMENT remoteaddr (#PCDATA)>

<!-- 
Each job can have an optional list of parameters.
-->

<!ELEMENT parameters (param*)>

<!ELEMENT param (#PCDATA)>
<!ATTLIST param name CDATA #REQUIRED>

<!--
# Configuration that controls individual sites in OpenCms.
# Each <site> subnode of <sites> defines a site with the server name
# and the corresponding VFS uri in OpenCms.
#
# workplace-server: the default server of the OpenCms workplace
# default-uri: the default uri marks the site that is used when 
#              a request matches no defined site 
-->
<!ELEMENT sites (workplace-server, default-uri, site+)>
<!ELEMENT workplace-server (#PCDATA)>
<!ELEMENT default-uri (#PCDATA)>
<!ELEMENT site EMPTY>
<!ATTLIST site 
	server CDATA #REQUIRED
	uri CDATA #REQUIRED>
	
<!--
# Optional configuration that controls some additional information as key/value param pairs
# Parameters and values are stored as OpenCms runtime properties.
-->
<!ELEMENT runtimeproperties (param*)>

