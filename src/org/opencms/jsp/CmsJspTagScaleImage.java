
package org.opencms.jsp;

import org.opencms.file.CmsObject;
import org.opencms.file.CmsResource;
import org.opencms.flex.CmsFlexController;
import org.opencms.jsp.util.CmsJspImageBean;
import org.opencms.jsp.util.CmsJspScaledImageBean;
import org.opencms.loader.CmsImageScaler;
import org.opencms.main.CmsException;
import org.opencms.main.CmsLog;
import org.opencms.main.OpenCms;
import org.opencms.staticexport.CmsLinkManager;
import org.opencms.util.CmsRequestUtil;
import org.opencms.util.CmsUriSplitter;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.servlet.ServletRequest;
import javax.servlet.jsp.JspException;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.logging.Log;

/**
 * This tag allows using the OpenCms native image scaling mechanism within JSP.<p>
 *
 * <em>No output is generated by this tag!</em>
 * Instead the tag generates a {@link org.opencms.jsp.util.CmsJspImageBean}.
 * This can be used to further process the selected image
 * with the provided image scaling parameters.<p>
 *
 * The following image formats are supported: BMP, GIF, JPEG, PNG, PNM, TIFF.<p>
 *
 * <em>
 * Note: Picture scaling is by default only enabled for target size with width and height
 * &lt;=1500. The size can be changed in the image scaler configuration in the file
 * <code>opencms-vfs.xml</code> in the body of the tag <code>&lt;loader&gt;</code>. Also other
 * options for the image scaler are set there.
 * </em>
 * <p>
 * This tag is an alternative to the OpenCms standard tag cms:img, providing additional flexibility.
 * This way you can use scaled images for:
 * <ul>
 *   <li>The standard HTML &lt;img&gt;-Tag.</li>
 *   <li>
 *     The HTML 5 &lt;picture&gt;-Tag with multiple sources (hi-DPI variants for retina displays)
 *     for responsive design.
 *   </li>
 *   <li>Further processing a scaled image anyway you want on your JSP.</li>
 * </ul>
 * </em>
 *
 * <p>
 * Example for a simple JSP that uses this tag to obtain information about an image:
 * <code>
 * &lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;<br>
 * &lt;%@ taglib prefix=&quot;cms&quot; uri=&quot;http://www.opencms.org/taglib/cms&quot;%&gt;<br>
 *<br>
 * &lt;cms:scaleImage var=&quot;imgBean&quot; src=&quot;/.galleries/samples/09.jpg?__scale=h:385,w:961,cx:42,cy:32,ch:385,cw:961&quot; /&gt;<br>
 * srcUrl: &lt;c:out value=&quot;${imgBean.srcUrl}&quot; /&gt;&lt;br&gt;<br>
 * vfsUri: &lt;c:out value=&quot;${imgBean.vfsUri}&quot; /&gt;&lt;br&gt;<br>
 * scalerParams: &lt;c:out value=&quot;${imgBean.scaler.requestParam}&quot; /&gt;&lt;br&gt;<br>
 * Width: &lt;c:out value=&quot;${imgBean.width}&quot; /&gt;&lt;br&gt;<br>
 * Height: &lt;c:out value=&quot;${imgBean.height}&quot; /&gt;&lt;br&gt;<br>
 * scaledWidth: &lt;c:out value=&quot;${imgBean.scaler.width}&quot; /&gt;&lt;br&gt;<br>
 * scaledHeight: &lt;c:out value=&quot;${imgBean.scaler.height}&quot; /&gt;&lt;br&gt;<br>
 * isScaled: &lt;c:out value=&quot;${imgBean.scaled}&quot; /&gt;&lt;br&gt;<br>
 * </code>
 */
public class CmsJspTagScaleImage extends CmsJspImageScalerTagSupport {

    /** The log object for this class. */
    private static final Log LOG = CmsLog.getLog(CmsJspTagScaleImage.class);

    /** Serial version UID required for safe serialization. */
    private static final long serialVersionUID = -6639978110802734737L;

    /** List of hi-DPI variant sizes to produce, e.g. 1.3x, 1.5x, 2x, 3x */
    private List<String> m_hiDpiVariantList;

    /** Name of the request attribute used to store the ScaledImageBean bean */
    private String m_var;

    /**
     * Creates a new image scaling tag instance.<p>
     */
    public CmsJspTagScaleImage() {
        super();
    }

    /**
     * Internal action method to create the scaled image bean.<p>
     *
     * @param cms the cms context
     * @param imageUri the image URI
     * @param targetScaler the target image scaler
     * @param hiDpiVariantList  optional list of hi-DPI variant sizes to produce, e.g. 1.3x, 1.5x, 2x, 3x
     *
     * @return the created ScaledImageBean bean
     *
     * @throws CmsException in case something goes wrong
     */
    public static CmsJspScaledImageBean imageTagAction(
        CmsObject cms,
        String imageUri,
        CmsImageScaler targetScaler,
        List<String> hiDpiVariantList)
    throws CmsException {

        // resolve possible relative URI
        //      String src = CmsLinkManager.getAbsoluteUri(src, controller.getCurrentRequest().getElementUri());
        CmsUriSplitter splitSrc = new CmsUriSplitter(imageUri);

        String scaleParam = null;
        if (splitSrc.getQuery() != null) {
            // check if the original URI already has parameters, this is true if original has been cropped
            String[] scaleStr = CmsRequestUtil.createParameterMap(splitSrc.getQuery()).get(CmsImageScaler.PARAM_SCALE);
            if (scaleStr != null) {
                scaleParam = scaleStr[0];
            }
        }

        String vfsUri = splitSrc.getPrefix();
        CmsResource imageRes = cms.readResource(vfsUri);
        CmsImageScaler originalScaler = new CmsImageScaler(cms, imageRes);
        CmsJspScaledImageBean scaledImage = new CmsJspScaledImageBean();
        scaledImage.setVfsUri(vfsUri);

        if ((targetScaler.getHeight() <= 0) && (targetScaler.getWidth() <= 0)) {
            // no image dimensions have been given at all
            // in this case initialize the image bean with the original image size
            // assuming use case "I want information about an image set in XML content in my JSP"
            if (scaleParam != null) {
                // scale parameters have been set
                targetScaler = new CmsImageScaler(scaleParam);
                scaledImage.setHeight(originalScaler.getHeight());
                scaledImage.setWidth(originalScaler.getWidth());
            } else {
                // no scale parameters, so target image is original image
                targetScaler = originalScaler;
            }
        } else {
            targetScaler = initScaler(originalScaler, scaleParam, targetScaler);
        }

        String imageSrc = cms.getSitePath(imageRes);
        if (targetScaler.isValid() && !targetScaler.isOriginalScaler()) {
            // now append the scaler parameters if required
            imageSrc += targetScaler.toRequestParam();
        }

        scaledImage.setSrcUrl(OpenCms.getLinkManager().substituteLink(cms, imageSrc));
        scaledImage.setScaler(targetScaler);

        // now handle hi-DPI variants
        if ((hiDpiVariantList != null) && (hiDpiVariantList.size() > 0)) {
            handleHiDpiVariants(cms, imageRes, targetScaler, scaledImage, originalScaler, hiDpiVariantList);
        }
        return scaledImage;
    }

    /**
     * Internal method to handle requested hi-DPI variants, adding ImageBeans for all hi-DPI
     * variants to <code>scaledImage</code>
     *
     * @param cms the current CmsObject
     * @param imageRes the CMS resource representing the image
     * @param scaler the CmsImageScaler for the scaled image, will be cloned for each hi-DPI variant
     * @param scaledImage the ScaledImage bean (scaled images will be added to this)
     * @param originalScaler the CmsImageScaler containing the information about the original image
     * @param hiDpiVariantList the list of hi-DPI variant sizes to produce, e.g. 1.3x, 1.5x, 2x, 3x
     */
    private static void handleHiDpiVariants(
        CmsObject cms,
        CmsResource imageRes,
        CmsImageScaler scaler,
        CmsJspScaledImageBean scaledImage,
        CmsImageScaler originalScaler,
        List<String> hiDpiVariantList) {

        int targetWidth = scaler.getWidth();
        int targetHeight = scaler.getHeight();
        int originalWidth = originalScaler.getWidth();
        int originalHeight = originalScaler.getHeight();

        for (String multiplierString : hiDpiVariantList) {

            if (!multiplierString.matches("^[0-9]+(.[0-9]+)?x$")) {
                if (LOG.isWarnEnabled()) {
                    LOG.warn(
                        String.format("Illegal multiplier format: %s not usable for image scaling", multiplierString));
                }
                continue;
            }
            float multiplier = NumberUtils.createFloat(
                multiplierString.substring(0, multiplierString.length() - 1)).floatValue();
            int width = Math.round(targetWidth * multiplier);
            int height = Math.round(targetHeight * multiplier);

            if ((originalWidth >= width) && (originalHeight >= height)) {
                CmsImageScaler hiDpiScaler = (CmsImageScaler)scaler.clone();
                hiDpiScaler.setWidth(width);
                hiDpiScaler.setHeight(height);

                String imageSrc = cms.getSitePath(imageRes);
                if (hiDpiScaler.isValid()) {
                    // now append the scaler parameters
                    imageSrc += hiDpiScaler.toRequestParam();
                }
                CmsJspImageBean image = new CmsJspImageBean();
                image.setSrcUrl(OpenCms.getLinkManager().substituteLink(cms, imageSrc));
                image.setScaler(hiDpiScaler);
                scaledImage.addHiDpiImage(multiplierString, image);
            }
        }
    }

    /**
     * Initializes the images scaler used for creating the scaled image bean.<p>
     *
     * @param originalScaler a scaler that contains the original image dimensions
     * @param scaleParams optional scaler parameters for cropping
     * @param targetScaler the target image scaler
     *
     * @return the image scaler
     */
    private static CmsImageScaler initScaler(
        CmsImageScaler originalScaler,
        String scaleParams,
        CmsImageScaler targetScaler) {

        int width = targetScaler.getWidth();
        int height = targetScaler.getHeight();

        if ((scaleParams != null) && !"undefined".equals(scaleParams)) {
            CmsImageScaler cropScaler = null;
            // use cropped image as a base for scaling
            cropScaler = new CmsImageScaler(scaleParams);
            if (targetScaler.getType() == 5) {
                // must reset height / width parameters in crop scaler for type 5
                cropScaler.setWidth(cropScaler.getCropWidth());
                cropScaler.setHeight(cropScaler.getCropHeight());
            }
            targetScaler = cropScaler.getCropScaler(targetScaler);
            width = targetScaler.getWidth();
            height = targetScaler.getHeight();
        }

        // If either width or height is not set, the CmsImageScaler will have a problem. So the
        // missing dimension is calculated with the given dimension and the original image's
        // aspect ratio (or the respective crop aspect ratio).
        if ((width <= 0) || (height <= 0)) {
            float ratio;
            // use the original width/height or the crop with/height for aspect ratio calculation
            if (!targetScaler.isCropping()) {
                ratio = (float)originalScaler.getWidth() / (float)originalScaler.getHeight();
            } else {
                ratio = (float)targetScaler.getCropWidth() / (float)targetScaler.getCropHeight();
            }
            if (width <= 0) {
                // width is not set, calculate it with the given height and the original/crop aspect ratio
                width = Math.round(height * ratio);
                targetScaler.setWidth(width);
            } else if (height <= 0) {
                // height is not set, calculate it with the given width and the original/crop aspect ratio
                height = Math.round(width / ratio);
                targetScaler.setHeight(height);
            }
        }

        // calculate target scale dimensions (if required)
        if (((targetScaler.getHeight() <= 0) || (targetScaler.getWidth() <= 0))
            || ((targetScaler.getType() == 5) && targetScaler.isValid() && !targetScaler.isCropping())) {
            // read the image properties for the selected resource
            if (originalScaler.isValid()) {
                targetScaler = originalScaler.getReScaler(targetScaler);
            }
        }
        return targetScaler;
    }

    /**
     * Does some cleanup before returning EVAL_PAGE
     *
     * @see javax.servlet.jsp.tagext.Tag#doEndTag()
     */
    @SuppressWarnings("unused")
    @Override
    public int doEndTag() throws JspException {

        release();
        return EVAL_PAGE;
    }

    /**
     * Handles the Start tag, checks some parameters, uses the CmsImageScaler to create a scaled
     * version of the image (and hi-DPI variants if necessary), stores all information in a
     * ScaledImageBean and stores it as a request attribute (the name for this attribute is given
     * with the tag attribute "var").
     *
     * @return EVAL_BODY_INCLUDE or SKIP_BODY in case of an unexpected Exception (please consult
     * the OpenCms log file if that happens)
     */
    @Override
    public int doStartTag() {

        ServletRequest req = pageContext.getRequest();

        // this will always be true if the page is called through OpenCms
        if (CmsFlexController.isCmsRequest(req)) {

            try {
                CmsJspScaledImageBean scaledImage = null;
                try {
                    CmsFlexController controller = CmsFlexController.getController(req);
                    CmsObject cms = controller.getCmsObject();
                    String src = CmsLinkManager.getAbsoluteUri(m_src, controller.getCurrentRequest().getElementUri());
                    scaledImage = imageTagAction(cms, src, m_scaler, m_hiDpiVariantList);
                } catch (CmsException e) {
                    // any issue accessing the VFS - just return SKIP_BODY
                    // otherwise template layout will get mixed up with nasty exception messages
                    if (LOG.isWarnEnabled()) {
                        LOG.warn(Messages.get().getBundle().key(Messages.ERR_IMAGE_TAG_VFS_ACCESS_1, m_src), e);
                    }
                }
                pageContext.getRequest().setAttribute(m_var, scaledImage);
            } catch (Exception ex) {
                if (LOG.isErrorEnabled()) {
                    LOG.error(Messages.get().getBundle().key(Messages.ERR_PROCESS_TAG_1, "scaleImage"), ex);
                }
                return SKIP_BODY;
            }
        }
        return EVAL_BODY_INCLUDE;
    }

    /**
     * Does some cleanup before the tag is released to the tag pool
     *
     * @see javax.servlet.jsp.tagext.Tag#release()
     */
    @Override
    public void release() {

        m_hiDpiVariantList = null;
        m_var = null;
        super.release();
    }

    /**
     * Sets the String containing a comma separated list of hi-DPI variants to produce, e.g.
     * "1.3x,1.5x,2x,3x". Currently in most cases "2x" should suffice to generate an additional
     * image for retina screens.
     *
     * @param value comma separated list of hi-DPI variants to produce, e.g. "1.3x,1.5x,2x,3x"
     */
    public void setHiDpiVariants(String value) {

        m_hiDpiVariantList = new ArrayList<>(4);
        String[] multipliers = StringUtils.split(value, ',');
        Collections.addAll(m_hiDpiVariantList, multipliers);
    }

    /**
     * Sets the name of the variable used for storing the resulting bean.
     *
     * @param value name of the resulting CmsJspScaledImage bean
     */
    public void setVar(String value) {

        m_var = value;
    }
}
