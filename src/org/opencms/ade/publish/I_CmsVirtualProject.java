/*
 * This library is part of OpenCms -
 * the Open Source Content Management System
 *
 * Copyright (c) Alkacon Software GmbH (http://www.alkacon.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * For further information about Alkacon Software, please see the
 * company website: http://www.alkacon.com
 *
 * For further information about OpenCms, please see the
 * project website: http://www.opencms.org
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package org.opencms.ade.publish;

import org.opencms.ade.publish.shared.CmsProjectBean;
import org.opencms.ade.publish.shared.CmsPublishResource;
import org.opencms.file.CmsObject;
import org.opencms.file.CmsResource;
import org.opencms.main.CmsException;
import org.opencms.util.CmsUUID;

import java.util.List;
import java.util.Map;

/**
 * This interface can be used to implement a new option in the publish dialog's project selector.
 * 
 * Instead of reading the resources from a real project, the resource lists will be generated by the classes which implement this interface. 
 */
public interface I_CmsVirtualProject {

    /**
     * Work context which is  used to actually work with a virtual project.<p>
     */
    public interface I_Context {

        /**
         * Gets the project bean.<p>
         * 
         * @return the project bean 
         */
        CmsProjectBean getProjectBean();

        /**
         * Gets the resources of the virtual project.<p>
         * 
         * @return the generated list of resources 
         * 
         * @throws CmsException if something goes wrong 
         */
        List<CmsResource> getResources() throws CmsException;

        /**
         * Sorts a list of publish resources before grouping.<p>
         * 
         * @param publishResources the publish resources to sort 
         */
        void preSort(List<CmsPublishResource> publishResources);

    }

    /**
     * Creates a context object to work with this virtual project.<p>
     * 
     * @param cms the current CMS context 
     * @param params the current publish parameters 
     * 
     * @return a new context based on the CmsObject and the publish parameters  
     */
    I_Context createContext(CmsObject cms, Map<String, String> params);

    /**
     * Gets the project id.<p>
     * 
     * @return the project id 
     */
    CmsUUID getProjectId();
}
