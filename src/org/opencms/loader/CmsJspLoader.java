/*
 * File   : $Source: /alkacon/cvs/opencms/src/org/opencms/loader/CmsJspLoader.java,v $
 * Date   : $Date: 2004/06/06 10:35:29 $
 * Version: $Revision: 1.56 $
 *
 * This library is part of OpenCms -
 * the Open Source Content Mananagement System
 *
 * Copyright (C) 2002 - 2003 Alkacon Software (http://www.alkacon.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * For further information about Alkacon Software, please see the
 * company website: http://www.alkacon.com
 *
 * For further information about OpenCms, please see the
 * project website: http://www.opencms.org
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package org.opencms.loader;

import org.opencms.file.CmsFile;
import org.opencms.file.CmsObject;
import org.opencms.file.CmsResource;
import org.opencms.flex.CmsFlexCache;
import org.opencms.flex.CmsFlexController;
import org.opencms.flex.CmsFlexRequest;
import org.opencms.flex.CmsFlexResponse;
import org.opencms.main.CmsException;
import org.opencms.main.CmsLog;
import org.opencms.main.I_CmsConstants;
import org.opencms.main.OpenCms;
import org.opencms.staticexport.CmsLinkManager;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.SocketException;
import java.util.HashSet;
import java.util.Locale;
import java.util.Set;

import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.collections.ExtendedProperties;

/**
 * The JSP loader which enables the execution of JSP in OpenCms.<p>
 * 
 * Parameters supported by this loader:<dl>
 * 
 * <dt>jsp.repository</dt><dd>
 * (Optional) This is the root directory in the "real" file system where generated JSPs are stored. 
 * The default is the web application path, e.g. in Tomcat if your web application is 
 * names "opencms" it would be <code>${TOMCAT_HOME}/webapps/opencms/</code>.
 * The <code>jsp.folder</code> (see below) is added to this path.
 * Usually the <code>jsp.repository</code> is not changed.
 * </dd>
 * 
 * <dt>jsp.folder</dt><dd>
 * (Optional) A path relative to the <code>jsp.repository</code> path where the 
 * JSPs generated by OpenCms are stored. The default is to store the generated JSP in 
 * <code>/WEB-INF/jsp/</code>. 
 * This works well in Tomcat 4, and the JSPs are 
 * not accessible directly from the outside this way, only through the OpenCms servlet.
 * <i>Please note:</i> Some servlet environments (e.g. BEA Weblogic) do not permit 
 * JSPs to be stored under <code>/WEB-INF</code>. For environments like these,
 * set the path to some place where JSPs can be accessed, e.g. <code>/jsp/</code> only.
 * </dd>
 * 
 * <dt>jsp.errorpage.committed</dt><dd>
 * (Optional) This parameter controls behaviour of JSP error pages
 * i.e. <code>&lt;% page errorPage="..." %&gt;</code>. If you find that these don't work
 * in your servlet environment, you should try to change the value here. 
 * The default <code>true</code> has been tested with Tomcat 4.1 and 5.0. 
 * Older versions of Tomcat like 4.0 require a setting of <code>false</code>.</dd>
 * </dl> 
 * 
 * @author  Alexander Kandzior (a.kandzior@alkacon.com)
 *
 * @version $Revision: 1.56 $
 * @since FLEX alpha 1
 * 
 * @see I_CmsResourceLoader
 */
public class CmsJspLoader implements I_CmsResourceLoader {

    /** Encoding to write JSP files to disk (<code>ISO-8859-1</code>) */
    public static final String C_DEFAULT_JSP_ENCODING = "ISO-8859-1";

    /** Special JSP directive tag start (<code>%&gt;</code>)*/
    public static final String C_DIRECTIVE_END = "%>";

    /** Special JSP directive tag start (<code>&lt;%@</code>)*/
    public static final String C_DIRECTIVE_START = "<%@";

    /** Extension for JSP managed by OpenCms (<code>.jsp</code>) */
    public static final String C_JSP_EXTENSION = ".jsp";

    /** The id of this loader */
    public static final int C_RESOURCE_LOADER_ID = 6;

    /** Flag for debugging output. Set to 9 for maximum verbosity. */
    private static final int DEBUG = 0;

    /** The directory to store the generated JSP pages in (absolute path) */
    private static String m_jspRepository;

    /** The directory to store the generated JSP pages in (relative path in web application */
    private static String m_jspWebAppRepository;

    /** The CmsFlexCache used to store generated cache entries in */
    private CmsFlexCache m_cache;

    /** The resource loader configuration */
    private ExtendedProperties m_configuration;

    /** Flag to indicate if error pages are mared a "commited" */
    // TODO: This is a hack, investigate this issue with different runtime environments
    private boolean m_errorPagesAreNotCommited = false; // should work for Tomcat 4.1

    /**
     * The constructor of the class is empty, the initial instance will be 
     * created by the loader manager upon startup of OpenCms.<p>
     * 
     * @see org.opencms.loader.CmsLoaderManager
     */
    public CmsJspLoader() {

        m_configuration = new ExtendedProperties();
    }

    /**
     * Returns the absolute path in the "real" file system for the JSP repository
     * toplevel directory.
     *
     * @return The full path to the JSP repository
     */
    public static String getJspRepository() {

        return m_jspRepository;
    }

    /**
     * @see org.opencms.configuration.I_CmsConfigurationParameterHandler#addConfigurationParameter(java.lang.String, java.lang.String)
     */
    public void addConfigurationParameter(String paramName, String paramValue) {

        m_configuration.addProperty(paramName, paramValue);
    }

    /** Destroy this ResourceLoder, this is a NOOP so far.  */
    public void destroy() {

        // NOOP
    }

    /**
     * @see org.opencms.loader.I_CmsResourceLoader#dump(org.opencms.file.CmsObject, org.opencms.file.CmsResource, java.lang.String, java.util.Locale, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
     */
    public byte[] dump(
        CmsObject cms,
        CmsResource file,
        String element,
        Locale locale,
        HttpServletRequest req,
        HttpServletResponse res
    ) throws ServletException, IOException {

        // get the current Flex controller
        CmsFlexController controller = (CmsFlexController)req.getAttribute(CmsFlexController.ATTRIBUTE_NAME);
        CmsFlexController oldController = null;
        if (controller != null) {
            // for dumping we must create an new "top level" controller, save the old one to be restored later
            oldController = controller;
        }

        byte[] result = null;
        try {
            // now create a new, temporary Flex controller
            controller = getController(cms, file, req, res, false, false);
            // dispatch to the JSP
            result = dispatchJsp(controller);
            // remove temporary controller
            req.removeAttribute(CmsFlexController.ATTRIBUTE_NAME);
        } finally {
            if (oldController != null) {
                // update "date last modified"
                oldController.updateDates(controller.getDateLastModified(), controller.getDateExpires());
                // reset saved controller                
                req.setAttribute(CmsFlexController.ATTRIBUTE_NAME, oldController);
            }
        }

        return result;
    }

    /**
     * @see org.opencms.loader.I_CmsResourceLoader#export(org.opencms.file.CmsObject, org.opencms.file.CmsResource, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
     */
    public byte[] export(
        CmsObject cms, 
        CmsResource resource, 
        HttpServletRequest req, 
        HttpServletResponse res
    ) throws ServletException, IOException {

        // get the Flex controller
        CmsFlexController controller = getController(cms, resource, req, res, false, true);

        // dispatch to the JSP
        byte[] result = dispatchJsp(controller);

        // remove the controller from the request
        CmsFlexController.removeController(req);

        // write to the export stream (if required)
        if (result != null) {
            res.setStatus(HttpServletResponse.SC_OK);
        }

        // return the contents
        return result;
    }

    /**
     * @see org.opencms.configuration.I_CmsConfigurationParameterHandler#getConfiguration()
     */
    public ExtendedProperties getConfiguration() {

        // return only a copy of the configuration
        ExtendedProperties copy = new ExtendedProperties();
        copy.combine(m_configuration);
        return copy;
    }

    /**
     * @see org.opencms.loader.I_CmsResourceLoader#getLoaderId()
     */
    public int getLoaderId() {

        return C_RESOURCE_LOADER_ID;
    }

    /**
     * Return a String describing the ResourceLoader,
     * which is <code>"The OpenCms default resource loader for JSP"</code>
     * 
     * @return a describing String for the ResourceLoader 
     */
    public String getResourceLoaderInfo() {

        return "The OpenCms default resource loader for JSP";
    }

    /** 
     * Initialize the ResourceLoader,
     * here the configuration for the JSP repository and the FlexCache is initialized.<p>
     */
    public void initialize() {

        m_jspRepository = m_configuration.getString("jsp.repository");
        if (m_jspRepository == null) {
            m_jspRepository = OpenCms.getSystemInfo().getWebApplicationRfsPath();
        }
        m_jspWebAppRepository = m_configuration.getString("jsp.folder", "/WEB-INF/jsp/");
        if (!m_jspWebAppRepository.endsWith("/")) {
            m_jspWebAppRepository += "/";
        }
        m_jspRepository = CmsLinkManager.normalizeRfsPath(m_jspRepository + m_jspWebAppRepository);

        if (DEBUG > 0) {
            System.err.println("JspLoader: Setting jsp repository to " + m_jspRepository);
        }
        // get the "error pages are commited or not" flag from the configuration
        m_errorPagesAreNotCommited = m_configuration.getBoolean("jsp.errorpage.committed", true);
        // get the cache from the runtime properties
        m_cache = (CmsFlexCache)OpenCms.getRuntimeProperty(CmsFlexCache.C_LOADER_CACHENAME);
        // output setup information
        if (OpenCms.getLog(CmsLog.CHANNEL_INIT).isInfoEnabled()) { 
            OpenCms.getLog(CmsLog.CHANNEL_INIT).info(". Loader init          : JSP repository (absolute path): " + m_jspRepository);        
            OpenCms.getLog(CmsLog.CHANNEL_INIT).info(". Loader init          : JSP repository (web application path): " + m_jspWebAppRepository);              
            OpenCms.getLog(CmsLog.CHANNEL_INIT).info(". Loader init          : JSP repository (error page committed): " + m_errorPagesAreNotCommited);              
            OpenCms.getLog(CmsLog.CHANNEL_INIT).info(". Loader init          : " + this.getClass().getName() + " initialized");   
        }
    }

    /**
     * @see org.opencms.loader.I_CmsResourceLoader#isStaticExportEnabled()
     */
    public boolean isStaticExportEnabled() {

        return true;
    }

    /**
     * @see org.opencms.loader.I_CmsResourceLoader#isStaticExportProcessable()
     */
    public boolean isStaticExportProcessable() {

        return true;
    }

    /**
     * @see org.opencms.loader.I_CmsResourceLoader#isUsableForTemplates()
     */
    public boolean isUsableForTemplates() {

        return true;
    }

    /**
     * @see org.opencms.loader.I_CmsResourceLoader#isUsingUriWhenLoadingTemplate()
     */
    public boolean isUsingUriWhenLoadingTemplate() {

        return false;
    }

    /**
     * @see org.opencms.loader.I_CmsResourceLoader#load(org.opencms.file.CmsObject, org.opencms.file.CmsResource, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
     */
    public void load(
        CmsObject cms, 
        CmsResource file, 
        HttpServletRequest req, 
        HttpServletResponse res
    ) throws ServletException, IOException, CmsException {

        // load and process the JSP         
        boolean streaming = false;
        boolean bypass = false;

        // read "stream" property from requested VFS resource                                     
        String streamProperty = cms.readPropertyObject(
            cms.readAbsolutePath(file),
            I_CmsResourceLoader.C_LOADER_STREAMPROPERTY,
            false).getValue();
        if (streamProperty != null) {
            if ("yes".equalsIgnoreCase(streamProperty) || "true".equalsIgnoreCase(streamProperty)) {
                streaming = true;
            } else if ("bypass".equalsIgnoreCase(streamProperty) || "bypasscache".equalsIgnoreCase(streamProperty)) {
                bypass = true;
            }
        }

        // get the Flex controller
        CmsFlexController controller = getController(cms, file, req, res, streaming, true);

        if (bypass) {
            // bypass Flex cache for this page        
            if (DEBUG > 1) {
                System.err.println("JspLoader.load() bypassing cache for file " + cms.readAbsolutePath(file));
            }
            // update the JSP first if neccessary            
            String target = updateJsp(file, controller, new HashSet());
            // dispatch to external JSP
            req.getRequestDispatcher(target).forward(controller.getCurrentRequest(), res);
            if (DEBUG > 1) {
                System.err.println("JspLoader.load() cache was bypassed!");
            }
        } else {
            // Flex cache not bypassed, dispatch to internal JSP  
            dispatchJsp(controller);
        }

        // remove the controller from the request
        CmsFlexController.removeController(req);
    }

    /**
     * @see org.opencms.loader.I_CmsResourceLoader#service(org.opencms.file.CmsObject, org.opencms.file.CmsResource, javax.servlet.ServletRequest, javax.servlet.ServletResponse)
     */
    public void service(
        CmsObject cms, 
        CmsResource resource, 
        ServletRequest req, 
        ServletResponse res
    ) throws ServletException, IOException {

        CmsFlexController controller = (CmsFlexController)req.getAttribute(CmsFlexController.ATTRIBUTE_NAME);
        // get JSP target name on "real" file system
        String target = updateJsp(resource, controller, new HashSet(8));
        // important: Indicate that all output must be buffered
        controller.getCurrentResponse().setOnlyBuffering(true);
        // dispatch to external file
        controller.getCurrentRequest().getRequestDispatcherToExternal(cms.readAbsolutePath(resource), target).include(
            req,
            res);
    }

    /**
     * Dispatches the current request to the OpenCms internal JSP.<p>
     * 
     * @param controller the current controller
     * @return the content of the processed JSP
     * @throws ServletException
     * @throws IOException
     */
    private byte[] dispatchJsp(CmsFlexController controller) throws ServletException, IOException {

        // get request / response wrappers
        CmsFlexRequest f_req = controller.getCurrentRequest();
        CmsFlexResponse f_res = controller.getCurrentResponse();

        try {
            f_req.getRequestDispatcher(controller.getCmsObject().readAbsolutePath(controller.getCmsResource()))
                .include(f_req, f_res);
        } catch (SocketException e) {
            // uncritical, might happen if client (browser) does not wait until end of page delivery
            OpenCms.getLog(this).debug("Ignoring SocketException" + e);
        }

        byte[] result = null;
        HttpServletResponse res = controller.getTopResponse();

        if (!controller.isStreaming() && !f_res.isSuspended()) {
            try {
                // if a JSP errorpage was triggered the response will be already committed here
                if (!res.isCommitted() || m_errorPagesAreNotCommited) {

                    // check if the content was modified since the last request
                    if (controller.isTop()
                        && CmsFlexController.isNotModifiedSince(f_req, controller.getDateLastModified())) {
                        CmsFlexController.setDateExpiresHeader(res, controller.getDateExpires());
                        res.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
                        return null;
                    }

                    // get the result byte array
                    result = f_res.getWriterBytes();
                    if (controller.getTopRequest().getHeader(I_CmsConstants.C_HEADER_OPENCMS_EXPORT) != null) {
                        // this is an export request, don't write to the response stream
                        controller.getTopRequest().setAttribute(
                            I_CmsConstants.C_HEADER_OPENCMS_EXPORT,
                            new Long(controller.getDateLastModified()));
                    } else if (controller.isTop()) {
                        // process headers and write output if this is the "top" request/response                                  
                        res.setContentLength(result.length);
                        // set date last modified header
                        CmsFlexController.setDateLastModifiedHeader(res, controller.getDateLastModified());
                        CmsFlexController.setDateExpiresHeader(res, controller.getDateExpires());
                        CmsFlexResponse.processHeaders(f_res.getHeaders(), res);
                        res.getOutputStream().write(result);
                        res.getOutputStream().flush();
                    }
                }
            } catch (IllegalStateException e) {
                // uncritical, might happen if JSP error page was used
                OpenCms.getLog(this).debug("Ignoring IllegalStateException" + e);
            } catch (SocketException e) {
                // uncritical, might happen if client (browser) does not wait until end of page delivery
                OpenCms.getLog(this).debug("Ignoring SocketException", e);
            }
        }

        return result;
    }

    /**
     * Delivers a Flex controller, either by creating a new one, or by re-using an existing one.<p> 
     * 
     * @param cms the initial CmsObject to wrap in the controller
     * @param resource the resource requested 
     * @param cache the instance of the flex cache
     * @param req the current request
     * @param res the current response
     * @param streaming indicates if the response is streaming
     * @param top indicates if the response is the top response
     * @return
     */
    private CmsFlexController getController(
        CmsObject cms,
        CmsResource resource,
        HttpServletRequest req,
        HttpServletResponse res,
        boolean streaming,
        boolean top
    ) {

        CmsFlexController controller = null;
        if (top) {
            // only check for existing contoller if this is the "top" request/response
            controller = (CmsFlexController)req.getAttribute(CmsFlexController.ATTRIBUTE_NAME);
        }
        if (controller == null) {
            // create new request / response wrappers
            controller = new CmsFlexController(cms, resource, m_cache, req, res, streaming, top);
            req.setAttribute(CmsFlexController.ATTRIBUTE_NAME, controller);
            CmsFlexRequest f_req = new CmsFlexRequest(req, controller);
            CmsFlexResponse f_res = new CmsFlexResponse(res, controller, streaming, true);
            controller.push(f_req, f_res);
        }
        return controller;
    }

    /**
     * Returns the uri for a given JSP in the "real" file system, 
     * i.e. the path in the file
     * system relative to the web application directory.
     *
     * @param name The name of the JSP file 
     * @param online Flag to check if this is request is online or not
     * @return The full uri to the JSP
     */
    private String getJspUri(String repository, String name, boolean online) {

        StringBuffer result = new StringBuffer(64);
        result.append(repository);
        result.append(online ? "online" : "offline");
        result.append(name);
        return result.toString();
    }

    /**
     * Parses the JSP and modifies OpenCms ciritcal directive information.<p>
     * 
     * @param byteContent the original JSP content
     * @param encoding the encoding to use for the JSP
     * @param controller the controller for the JSP integration
     * @param includes a Set containing all JSP pages that have been already updated
     * @param isHardInclude indicated if this page is actually a "hard" include with <code>&lt;%@ include file="..." &gt;</code>
     * @return the modified JSP content
     * @throws UnsupportedEncodingException
     */
    private byte[] parseJsp(byte[] byteContent, String encoding, CmsFlexController controller, Set includes, boolean isHardInclude) {

        String content;
        // make sure encoding is set correctly
        try {
            content = new String(byteContent, encoding);
        } catch (UnsupportedEncodingException e) {
            // encoding property is not set correctly
            OpenCms.getLog(this).error("Encoding not set correctly for JSP '" + controller.getCurrentRequest().getElementUri() + "' (using default)", e);
            try {
                content = new String(byteContent, C_DEFAULT_JSP_ENCODING);
                encoding = C_DEFAULT_JSP_ENCODING;                
            } catch (UnsupportedEncodingException e2) {
                // should not happen since ISO-8859-1 is always a valid encoding
                content = new String(byteContent);
            }
        }
            
        // parse for special <%@cms file="..." %> tag
        content = parseJspCmsTag(content, controller, includes); 
        // parse for included files in tags
        content = parseJspIncludes(content, controller, includes);     
        // parse for <%@page pageEncoding="..." %> tag
        content = parseJspEncoding(content, encoding, isHardInclude);       
        // convert the result to bytes and return it
        try {
            return content.getBytes(encoding);
        } catch (UnsupportedEncodingException e) {
            // should not happen since encoding was already checked
            return content.getBytes();
        }                
    }
    
    /**
     * Parses the JSP content for the special &lt;%@cms file="..." %&gt; tag.<p>
     * 
     * @param content the JSP content to parse
     * @param controller the current JSP controller
     * @param includes a set of already parsed includes
     * @return the parsed JSP content
     */    
    private String parseJspCmsTag(String content, CmsFlexController controller, Set includes) {

        // check if a JSP directive occurs in the file
        int i1 = content.indexOf(C_DIRECTIVE_START);
        if (i1 < 0) {
            // no directive occurs
            return content;
        }
        
        StringBuffer buf = new StringBuffer(content.length());
        int p0 = 0, i2 = 0, slen = C_DIRECTIVE_START.length(), elen = C_DIRECTIVE_END.length();
        
        while (i1 >= 0) {
            // parse the file and replace JSP filename references 
            i2 = content.indexOf(C_DIRECTIVE_END, i1 + slen);
            if (i2 > i1) {
                String directive = content.substring(i1 + slen, i2);
                if (OpenCms.getLog(this).isDebugEnabled()) {
                    OpenCms.getLog(this).debug("JspLoader: Detected " + C_DIRECTIVE_START + directive + C_DIRECTIVE_END);
                }

                int t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0;
                while (directive.charAt(t1) == ' ') {
                    t1++;
                }
                String argument = null;
                if (directive.startsWith("cms", t1)) {
                    if (OpenCms.getLog(this).isDebugEnabled()) {
                        OpenCms.getLog(this).debug("JspLoader: Detected 'cms' directive!");
                    }
                    t2 = directive.indexOf("file", t1 + 3);
                    t5 = 4;
                }

                if (t2 > 0) {
                    String sub = directive.substring(t2 + t5);
                    char c1 = sub.charAt(t3);
                    while ((c1 == ' ') || (c1 == '=') || (c1 == '"')) {
                        c1 = sub.charAt(++t3);
                    }
                    t4 = t3;
                    while (c1 != '"') {
                        c1 = sub.charAt(++t4);
                    }
                    if (t4 > t3) {
                        argument = sub.substring(t3, t4);
                    }
                    if (OpenCms.getLog(this).isDebugEnabled()) {
                        OpenCms.getLog(this).debug("JspLoader: Argument given in directive is '" + argument + "'");
                    }
                }

                if (argument != null) {
                    //  try to update the referenced file
                    String jspname = updateJsp(argument, controller, includes);
                    if (jspname != null) {
                        directive = jspname;
                        if (OpenCms.getLog(this).isDebugEnabled()) {
                            OpenCms.getLog(this).debug(
                                "JspLoader: Changed directive to " + C_DIRECTIVE_START + directive + C_DIRECTIVE_END);
                        }
                    }
                    // cms directive was found
                    buf.append(content.substring(p0, i1));
                    buf.append(directive);
                    p0 = i2 + elen;
                    i1 = content.indexOf(C_DIRECTIVE_START, p0); 
                } else {
                    // cms directive was not found
                    buf.append(content.substring(p0, i1 + slen));
                    buf.append(directive);
                    p0 = i2;
                    i1 = content.indexOf(C_DIRECTIVE_START, p0);
                }              
            }
        }
        if (i2 > 0) {
            // the content of the JSP was changed 
            buf.append(content.substring(p0, content.length()));
            content = buf.toString();
        }
        return content;
    }
    
    /**
     * Parses the JSP content for the  &lt;%@page pageEncoding="..." %&gt; tag
     * and ensures that the JSP page encoding is set according to the OpenCms 
     * "content-encoding" property value of the JSP.<p>
     * 
     * @param content the JSP content to parse
     * @param encoding the encoding to use for the JSP
     * @param isHardInclude indicated if this page is actually a "hard" include with <code>&lt;%@ include file="..." &gt;</code>
     * @return the parsed JSP content
     */    
    private String parseJspEncoding(String content, String encoding, boolean isHardInclude) {
        
        // check if a JSP directive occurs in the file
        int i1 = content.indexOf(C_DIRECTIVE_START);
        if (i1 < 0) {
            // no directive occurs
            return content;
        }
        
        StringBuffer buf = new StringBuffer(content.length());
        int p0 = 0, i2 = 0, slen = C_DIRECTIVE_START.length();
        boolean found = false;
        
        while (i1 >= 0) {
            // parse the file and set/replace page encoding
            i2 = content.indexOf(C_DIRECTIVE_END, i1 + slen);
            if (i2 > i1) {
                String directive = content.substring(i1 + slen, i2);
                if (OpenCms.getLog(this).isDebugEnabled()) {
                    OpenCms.getLog(this).debug("JspLoader: Detected " + C_DIRECTIVE_START + directive + C_DIRECTIVE_END);
                }

                int t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0;
                while (directive.charAt(t1) == ' ') {
                    t1++;
                }
                String argument = null;
                if (directive.startsWith("page", t1)) {
                    if (OpenCms.getLog(this).isDebugEnabled()) {
                        OpenCms.getLog(this).debug("JspLoader: Detected 'page' directive!");
                    }
                    t2 = directive.indexOf("pageEncoding", t1 + 4);
                    t5 = 12;
                    if (t2 > 0) {
                        found = true;
                    }
                }

                if (t2 > 0) {
                    String sub = directive.substring(t2 + t5);
                    char c1 = sub.charAt(t3);
                    while ((c1 == ' ') || (c1 == '=') || (c1 == '"')) {
                        c1 = sub.charAt(++t3);
                    }
                    t4 = t3;
                    while (c1 != '"') {
                        c1 = sub.charAt(++t4);
                    }
                    if (t4 > t3) {
                        argument = sub.substring(t3, t4);
                    }
                    if (OpenCms.getLog(this).isDebugEnabled()) {
                        OpenCms.getLog(this).debug("JspLoader: Argument given in directive is '" + argument + "'");
                    }
                }

                if (argument != null) {
                    // a pageEncoding setting was found, changes have to be made
                    String pre = directive.substring(0, t2 + t3 + t5);
                    String suf = directive.substring(t2 + t3 + t5 + argument.length());
                    // change the encoding
                    directive = pre + encoding + suf;
                    if (OpenCms.getLog(this).isDebugEnabled()) {
                        OpenCms.getLog(this).debug(
                            "JspLoader: Changed directive to " + C_DIRECTIVE_START + directive + C_DIRECTIVE_END);
                    }
                }

                buf.append(content.substring(p0, i1 + slen));
                buf.append(directive);
                p0 = i2;
                i1 = content.indexOf(C_DIRECTIVE_START, p0);
            }
        }
        if (i2 > 0) {
            // the content of the JSP was changed 
            buf.append(content.substring(p0, content.length()));
        }
        if (found) {
            content = buf.toString();
        } else if (! isHardInclude) {
            // encoding setting was not found
            // if this is not a "hard" include then add the encoding to the top of the page
            // checking for the hard include is important to prevent errors with 
            // multiple page encoding settings if a templete is composed from several hard included elements
            // this is an issue in Tomcat 4.x but not 5.x
            StringBuffer buf2 = new StringBuffer(buf.length() + 32);
            buf2.append("<%@ page pageEncoding=\"");
            buf2.append(encoding);
            buf2.append("\" %>");
            buf2.append(buf);
            content = buf2.toString();
        }        
        return content;
    }
    
    /**
     * Parses the JSP content for includes and replaces all OpenCms VFS 
     * path information with information for the real FS.<p>
     * 
     * @param content the JSP content to parse
     * @param controller the current JSP controller
     * @param includes a set of already parsed includes
     * @return the parsed JSP content
     */
    private String parseJspIncludes(String content, CmsFlexController controller, Set includes) {
        
        // check if a JSP directive occurs in the file
        int i1 = content.indexOf(C_DIRECTIVE_START);
        if (i1 < 0) {
            // no directive occurs
            return content;
        }
        
        StringBuffer buf = new StringBuffer(content.length());
        int p0 = 0, i2 = 0, slen = C_DIRECTIVE_START.length();
        
        while (i1 >= 0) {
            // parse the file and replace JSP filename references 
            i2 = content.indexOf(C_DIRECTIVE_END, i1 + slen);
            if (i2 > i1) {
                String directive = content.substring(i1 + slen, i2);
                if (OpenCms.getLog(this).isDebugEnabled()) {
                    OpenCms.getLog(this).debug("JspLoader: Detected " + C_DIRECTIVE_START + directive + C_DIRECTIVE_END);
                }

                int t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0;
                while (directive.charAt(t1) == ' ') {
                    t1++;
                }
                String argument = null;
                if (directive.startsWith("include", t1)) {
                    if (OpenCms.getLog(this).isDebugEnabled()) {
                        OpenCms.getLog(this).debug("JspLoader: Detected 'include' directive!");
                    }
                    t2 = directive.indexOf("file", t1 + 7);
                    t5 = 6;
                } else if (directive.startsWith("page", t1)) {
                    if (OpenCms.getLog(this).isDebugEnabled()) {
                        OpenCms.getLog(this).debug("JspLoader: Detected 'page' directive!");
                    }
                    t2 = directive.indexOf("errorPage", t1 + 4);
                    t5 = 11;
                }

                if (t2 > 0) {
                    String sub = directive.substring(t2 + t5);
                    char c1 = sub.charAt(t3);
                    while ((c1 == ' ') || (c1 == '=') || (c1 == '"')) {
                        c1 = sub.charAt(++t3);
                    }
                    t4 = t3;
                    while (c1 != '"') {
                        c1 = sub.charAt(++t4);
                    }
                    if (t4 > t3) {
                        argument = sub.substring(t3, t4);
                    }
                    if (OpenCms.getLog(this).isDebugEnabled()) {
                        OpenCms.getLog(this).debug("JspLoader: Argument given in directive is '" + argument + "'");
                    }
                }

                if (argument != null) {
                    // a file was found, changes have to be made
                    String pre = directive.substring(0, t2 + t3 + t5);
                    String suf = directive.substring(t2 + t3 + t5 + argument.length());
                    // now try to update the referenced file 
                    String jspname = updateJsp(argument, controller, includes);
                    if (jspname != null) {
                        // only change something in case no error had occured
                        directive = pre + jspname + suf;
                        if (OpenCms.getLog(this).isDebugEnabled()) {
                            OpenCms.getLog(this).debug(
                                "JspLoader: Changed directive to " + C_DIRECTIVE_START + directive + C_DIRECTIVE_END);
                        }
                    }
                }

                buf.append(content.substring(p0, i1 + slen));
                buf.append(directive);
                p0 = i2;
                i1 = content.indexOf(C_DIRECTIVE_START, p0);
            }
        }
        if (i2 > 0) {
            // the content of the JSP was changed 
            buf.append(content.substring(p0, content.length()));
            content = buf.toString();
        }
        return content;
    }

    /**
     * Updates a JSP page in the "real" file system in case the VFS resource has changed.<p>
     * 
     * Also processes the <code>&lt;%@ cms %&gt;</code> tags before the JSP is written to the real FS.
     * Also recursivly updates all files that are referenced by a <code>&lt;%@ cms %&gt;</code> tag 
     * on this page to make sure the file actually exists in the real FS. 
     * All <code>&lt;%@ include %&gt;</code> tags are parsed and the name in the tag is translated
     * from the OpenCms VFS path to the path in the real FS. 
     * The same is done for filenames in <code>&lt;%@ page errorPage=... %&gt;</code> tags.
     * 
     * @param resource the reqested JSP file resource in the VFS
     * @param controller the controller for the JSP integration
     * @param updates a Set containing all JSP pages that have been already updated
     * @return the file name of the updated JSP in the "real" FS
     * 
     * @throws ServletException might be thrown in the process of including the JSP 
     * @throws IOException might be thrown in the process of including the JSP 
     */
    private synchronized String updateJsp(CmsResource resource, CmsFlexController controller, Set updates)
    throws IOException, ServletException {

        CmsObject cms = controller.getCmsObject();
        // can not use save/restore methods since this is called more then once by recursion
        String oldSiteRoot = cms.getRequestContext().getSiteRoot();
        try {
            // all JSP must be exported with full "root path" site root information
            cms.getRequestContext().setSiteRoot("");
            
            String jspVfsName = cms.readAbsolutePath(resource);
            String extension;
            boolean isHardInclude;
            if ((resource.getLoaderId() == CmsJspLoader.C_RESOURCE_LOADER_ID) 
                && (! jspVfsName.endsWith(C_JSP_EXTENSION))) {
                // this is a true JSP resource that does not end with ".jsp"
                extension = C_JSP_EXTENSION;     
                isHardInclude = false;
            } else {
                // not a JSP resource or already ends with ".jsp"
                extension = "";
                // if this is a JSP we don't treat it as hard include
                isHardInclude = (resource.getLoaderId() != CmsJspLoader.C_RESOURCE_LOADER_ID);
            }            
            
            String jspTargetName = getJspUri(m_jspWebAppRepository, jspVfsName + extension, controller.getCurrentRequest().isOnline());
            
            // check if page was already updated
            if (updates.contains(jspTargetName)) {
                // no need to write the already included file to the real FS more then once
                return jspTargetName;
            }
            updates.add(jspTargetName);

            String jspPath = getJspUri(m_jspRepository, jspVfsName + extension, controller.getCurrentRequest().isOnline());

            File d = new File(jspPath).getParentFile();
            if ((d == null) || (d.exists() && !(d.isDirectory() && d.canRead()))) {
                if (OpenCms.getLog(this).isErrorEnabled()) {
                    OpenCms.getLog(this).error("Could not access directory for " + jspPath);
                }
                throw new ServletException("JspLoader: Could not access directory for " + jspPath);
            }

            if (!d.exists()) {
                // create directory structure
                d.mkdirs();
            }

            // check if the JSP muse be updated
            boolean mustUpdate = false;
            File f = new File(jspPath);
            if (!f.exists()) {
                // file does not exist in real FS
                mustUpdate = true;
            } else if (f.lastModified() <= resource.getDateLastModified()) {
                // file in real FS is older then file in VFS
                mustUpdate = true;
            } else if (controller.getCurrentRequest().isDoRecompile()) {
                // recompile is forced with parameter
                mustUpdate = true;
            }

            if (mustUpdate) {
                if (OpenCms.getLog(this).isDebugEnabled()) {
                    OpenCms.getLog(this).debug("JspLoader: Writing JSP file '" + jspTargetName + "'");
                }
                byte[] contents;
                String encoding;
                try {
                    contents = CmsFile.upgrade(resource, cms).getContents();
                    // check the "content-encoding" property for the JSP
                    encoding = cms.readPropertyObject(
                        jspVfsName,
                        I_CmsConstants.C_PROPERTY_CONTENT_ENCODING,
                        false).getValue(C_DEFAULT_JSP_ENCODING);
                    encoding = encoding.trim().toUpperCase();
                } catch (CmsException e) {
                    controller.setThrowable(e, jspVfsName);
                    throw new ServletException("JspLoader: Could not access JSP file '" + jspVfsName + "'", e);
                }

                try {
                    // parse the JSP and modify OpenCms critical directives
                    contents = parseJsp(contents, encoding, controller, updates, isHardInclude);
                    // write the parsed JSP content to the real FS
                    FileOutputStream fs = new FileOutputStream(f);
                    fs.write(contents);
                    fs.close();
                    contents = null;

                    if (OpenCms.getLog(this).isInfoEnabled()) {
                        OpenCms.getLog(this).info(
                            "Updated JSP file \""
                                + jspTargetName
                                + "\" for resource \""
                                + cms.readAbsolutePath(resource)
                                + "\"");
                    }
                } catch (FileNotFoundException e) {
                    throw new ServletException("JspLoader: Could not write to file '" + f.getName() + "'\n" + e, e);
                }
            }

            // update "last modified" and "expires" date on controller
            controller.updateDates(f.lastModified(), CmsResource.DATE_EXPIRED_DEFAULT);

            return jspTargetName;
        } finally {
            // restore the site root of the request context
            cms.getRequestContext().setSiteRoot(oldSiteRoot);
        }
    }

    /**
     * Updates a JSP page in the "real" file system in case the VFS resource has changed based on the resource name.<p>
     * 
     * Gernates a resource based on the provided name and calls {@link #updateJsp(CmsResource, CmsFlexController, Set)}.<p>
     * 
     * @param vfsName the name of the JSP file resource in the VFS
     * @param controller the controller for the JSP integration
     * @param includes a Set containing all JSP pages that have been already included (i.e. updated)
     * @return the file name of the updated JSP in the "real" FS
     */
    private String updateJsp(String vfsName, CmsFlexController controller, Set includes) {
        String jspVfsName = CmsLinkManager.getAbsoluteUri(
            vfsName, 
            controller.getCurrentRequest().getElementRootPath());
        if (OpenCms.getLog(this).isDebugEnabled()) {
            OpenCms.getLog(this).debug("JspLoader: Trying to update JSP from VFS file '" + jspVfsName + "'");
        }
        String jspRfsName = null;
        try {
            // make sure the jsp referenced file is generated
            CmsResource includeResource = controller.getCmsObject().readFileHeader(jspVfsName);
            jspRfsName = updateJsp(includeResource, controller, includes);
            if (OpenCms.getLog(this).isDebugEnabled()) {
                OpenCms.getLog(this).debug("JspLoader: Name of JSP in real FS is '" + jspRfsName + "'");
            }            
        } catch (Exception e) {
            jspRfsName = null;
            if (OpenCms.getLog(this).isDebugEnabled()) {
                OpenCms.getLog(this).debug("JspLoader: Error while udating included JSP file '" + jspVfsName + "'\n", e);
            }
        }
        return jspRfsName;
    }
}